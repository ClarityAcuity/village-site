{"componentChunkName":"component---src-components-md-posts-layout-js","path":"/blog/js-questions","result":{"data":{"mdx":{"id":"932eeba4-7dfa-5739-8f82-234b8429e179","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JS Questions\",\n  \"date\": \"2021-02-01\",\n  \"author\": \"Villager Liao\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Promise\"), mdx(\"p\", null, \"use Promise to print array \", \"[11, 3, 5, 7, 25, 4, 6]\", \" item at every 100ms\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function x(v) {\\n  return v.reduce((chain, n) => {\\n    return chain.then(\\n      (_) =>\\n        new Promise((resolve, reject) => {\\n          setTimeout(() => {\\n            console.log(n);\\n            resolve(n);\\n          }, 1000);\\n        }),\\n      (e) => console.log(e)\\n    );\\n  }, Promise.resolve());\\n}\\n\\nx([11, 3, 5, 7, 25, 4, 6]);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function print(n) {\\n  return new Promise((resolve, reject) => {\\n    setTimeout(() => {\\n      console.log(n);\\n      resolve(n);\\n    }, 1000);\\n  });\\n}\\n\\nasync function y(v) {\\n  for (let i = 0; i < v.length; i++) {\\n    await print(v[i]);\\n  }\\n}\\n\\ny([11, 3, 5, 7, 25, 4, 6]);\\n\")), mdx(\"h2\", null, \"Generator\"), mdx(\"p\", null, \"make a function, each time call it, the value will increase 1, start from 0\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function* gen() {\\n  let count = 0;\\n  while (true) {\\n    yield count++;\\n  }\\n}\\n\\nlet foo = gen();\\nconsole.log(foo.next().value);\\nconsole.log(foo.next().value);\\nconsole.log(foo.next().value);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function closure() {\\n  let count = 0;\\n  return {\\n    next: () => count++,\\n  };\\n}\\n\\nlet bar = closure();\\nconsole.log(bar.next());\\nconsole.log(bar.next());\\nconsole.log(bar.next());\\n\")), mdx(\"h2\", null, \"Curry\"), mdx(\"p\", null, \"make function add, add(1, 2, 3) = 6, curryAdd(1)(2)(3) = 6\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function add(a, b, c) {\\n  return a + b + c;\\n}\\n\\nfunction curry(func, ARITY = func.length) {\\n  return function curried(...args) {\\n    if (args.length >= ARITY) {\\n      return func.apply(this, args);\\n    } else {\\n      return function (...args2) {\\n        return curried.apply(this, args.concat(args2));\\n      };\\n    }\\n  };\\n}\\n\\nconst curryAdd = curry(add);\\n\\nconsole.log(add(1, 2, 3));\\nconsole.log(curryAdd(1)(2)(3));\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Note, those add() need specific ARITY\\nfunction add(...a) {\\n  return a.length >= 1\\n    ? a.reduce((sum, current) => sum + current, 0)\\n    : undefined;\\n}\\nconst curryAdd = curry(add, a.length);\\n\\nfunction add(a, ...b) {\\n  const [next, ...rest] = b\\n  if (b.length > 1) {\\n    return a + add(next, rest)\\n  }\\n  return a + Number(b[0])\\n}\\nconst curryAdd = curry(add, 1 + b.length);\\n\")), mdx(\"h2\", null, \"Promise.All\"), mdx(\"p\", null, \"impl \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"promiseAll\"), \" same as native \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Promise.all\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const promiseAll = (promises) => {\\n  let result = promises.map(() => 0);\\n\\n  return new Promise((resolve, reject) => {\\n    promises.forEach((task, i) => {\\n      task\\n        .then((finish) => {\\n          result[i] = finish;\\n          if (result.every((value) => !!value)) {\\n            resolve(result);\\n          }\\n        })\\n        .catch((err) => {\\n          reject(err);\\n        });\\n    });\\n  });\\n};\\n\\nfunction task1() {\\n  return new Promise((resolve, reject) => {\\n    setTimeout(() => {\\n      resolve(10);\\n    }, 1000);\\n  });\\n}\\nconst task2 = Promise.resolve(1000);\\nPromise.all([task1(), task2])\\n  .then((results) => {\\n    console.log(results);\\n  })\\n  .catch((error) => console.log(error));\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"JS Questions","date":"2021-02-01","author":"Villager Liao","keywords":null},"slug":"js-questions","excerpt":"Promise use Promise to print array  11, 3, 5, 7, 25, 4, 6  item at every 100ms Generator make a function, each time call it, the value willâ€¦"}},"pageContext":{"id":"932eeba4-7dfa-5739-8f82-234b8429e179","slug":"js-questions"}},"staticQueryHashes":["1059609371","2459496995"]}