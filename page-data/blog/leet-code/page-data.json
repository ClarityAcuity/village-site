{"componentChunkName":"component---src-components-md-posts-layout-js","path":"/blog/leet-code/","result":{"data":{"mdx":{"id":"efb962f4-eacf-5e51-bc58-d84da91c7e8c","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"LEETCODE\",\n  \"date\": \"2021-04-27\",\n  \"updated\": \"2021-04-27\",\n  \"author\": \"Villager Liao\",\n  \"keywords\": [\"leet code\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Leetcode\"), mdx(\"p\", null, \"If input array is sorted then\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Binary search\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Two pointers\")), mdx(\"p\", null, \"If asked for all permutations/subsets then\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Backtracking\")), mdx(\"p\", null, \"If given a tree then\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DFS\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"BFS\")), mdx(\"p\", null, \"If given a graph then\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DFS\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"BFS\")), mdx(\"p\", null, \"If given a linked list then\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Two pointers\")), mdx(\"p\", null, \"If recursion is banned then\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Stack\")), mdx(\"p\", null, \"If must solve in-place then\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Swap corresponding values\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Store one or more different values in the same pointer\")), mdx(\"p\", null, \"If asked for maximum/minumum subarray/subset/options then\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dynamic programming\")), mdx(\"p\", null, \"If asked for top/least K items then\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Heap\")), mdx(\"p\", null, \"If asked for common strings then\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Map\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Trie\")), mdx(\"p\", null, \"Else\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Map/Set for O(1) time & O(n) space\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sort input for O(nlogn) time and O(1) space\")), mdx(\"h2\", null, \"Reference\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://seanprashad.com/leetcode-patterns/\"\n  }, \"LEETCODE PATTERNS\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"LEETCODE","date":"2021-04-27","author":"Villager Liao","keywords":["leet code"]},"slug":"leet-code/","excerpt":"LEETCODE If input array is sorted then Binary search Two pointers If asked for all permutations/subsets then Backtracking If given a treeâ€¦"}},"pageContext":{"id":"efb962f4-eacf-5e51-bc58-d84da91c7e8c","slug":"leet-code/"}},"staticQueryHashes":["1059609371","2459496995"]}