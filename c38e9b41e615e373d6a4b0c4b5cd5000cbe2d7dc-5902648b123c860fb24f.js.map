{"version":3,"sources":["webpack://village/./src/lib/ray-tracing/vec3.js","webpack://village/./src/lib/ray-tracing/hitable.js","webpack://village/./src/lib/ray-tracing/sphere.js","webpack://village/./src/lib/ray-tracing/hitable-list.js","webpack://village/./src/lib/ray-tracing/ray.js","webpack://village/./src/lib/ray-tracing/camera.js","webpack://village/./src/lib/ray-tracing/material.js","webpack://village/./src/lib/ray-tracing/helpers.js","webpack://village/./src/lib/ray-tracing/gl-helpers.js","webpack://village/./src/lib/ray-tracing/render.js","webpack://village/./src/lib/ray-tracing/shaders/vertex.vert","webpack://village/./src/lib/ray-tracing/shaders/fragment.frag","webpack://village/./src/pages/ray-tracing/canvas.js","webpack://village/./src/pages/ray-tracing/pure-canvas.js"],"names":["Vec3","e0","e1","e2","this","e","x","y","z","r","g","b","identical","opposite","addVector","v","subtractVector","multiplyVector","multiplyScalar","t","divideScaler","k","length","Math","sqrt","squaredLength","makeUnitVector","dot","v1","v2","cross","unitVector","reflect","n","vec3","hit","ray","tMin","tMax","hitRecord","recordHit","sphere","record","center","radius","material","p","pointAtParameter","normal","Sphere","c","oc","origin","a","direction","discriminant","t1","t2","Hitable","HitableList","l","list","listSize","tempRecord","hitAnything","closestSoFar","i","Ray","A","B","Camara","lookFrom","lookAt","vUp","vFov","aspect","aperture","focusDist","lensRadius","theta","PI","halfHeight","tan","halfWidth","w","u","lowerLeftCorner","horizontal","vertical","getRay","s","rd","random","randomInUnitDisk","offset","camara","Material","Lambertian","albedo","scatter","rayIn","target","randomInUnitSphere","isScatter","scattered","attenuation","Metal","f","fuzz","Dielectric","ri","refIndex","outwardNormal","niOverNt","reflectProb","cosine","reflected","refracted","uv","dt","isRefracted","refract","r0","pow","schlick","lambertian","metal","dielectric","getImage","setRectangle","width","height","x2","y2","color","world","depth","Infinity","initImage","scene","push","chooseMat","hitableList","randomScene","image","colorMap","j","arr","next","eye","avgCol","iteration","ir","ig","ib","loadShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","deleteShader","texPositions","render","createProgram","shaderProgram","vsSource","fsSource","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","initShaderProgram","programInfo","program","attribLocations","vertexPosition","getAttribLocation","texCoordLocation","uniformLocations","resolutionUniformLocation","getUniformLocation","buffers","canvas","positions","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","texCoordBuffer","tex","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","position","texCoord","initBuffers","viewport","clearColor","clear","COLOR_BUFFER_BIT","useProgram","positionLocation","FLOAT","vertexAttribPointer","enableVertexAttribArray","uniform2f","primitiveType","TRIANGLES","drawArrays","drawScene","glRef","useRef","useEffect","current","contextRef","PureCanvas","ref","node","getContext","areEqual","memo"],"mappings":"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","file":"c38e9b41e615e373d6a4b0c4b5cd5000cbe2d7dc-5902648b123c860fb24f.js","sourcesContent":["/**\n * v(e) = e\n */\nclass Vec3 {\n  constructor(e0, e1, e2) {\n    this.e = [e0, e1, e2]\n  }\n  // vec3() {\n  //   e[0] = e0;\n  //   e[1] = e1;\n  //   e[2] = e2;\n  // }\n  x() {\n    return this.e[0]\n  }\n  y() {\n    return this.e[1]\n  }\n  z() {\n    return this.e[2]\n  }\n  r() {\n    return this.e[0]\n  }\n  g() {\n    return this.e[1]\n  }\n  b() {\n    return this.e[2]\n  }\n\n  identical() {\n    return new Vec3(this.e[0], this.e[1], this.e[2])\n  }\n  opposite() {\n    return new Vec3(-this.e[0], -this.e[1], -this.e[2])\n  }\n  // operator[](i){\n  //   return this.e[i]\n  // }\n  // operator[](i){\n  //   return this.e[i]\n  // }\n\n  addVector(v) {\n    const identical = this.identical()\n    identical.e[0] += v.e[0]\n    identical.e[1] += v.e[1]\n    identical.e[2] += v.e[2]\n    return identical\n  }\n  subtractVector(v) {\n    const identical = this.identical()\n    identical.e[0] -= v.e[0]\n    identical.e[1] -= v.e[1]\n    identical.e[2] -= v.e[2]\n    return identical\n  }\n  multiplyVector(v) {\n    const identical = this.identical()\n    identical.e[0] *= v.e[0]\n    identical.e[1] *= v.e[1]\n    identical.e[2] *= v.e[2]\n    return identical\n  }\n  // divideVector(v) {}\n\n  multiplyScalar(t) {\n    const identical = this.identical()\n    identical.e[0] *= t\n    identical.e[1] *= t\n    identical.e[2] *= t\n    return identical\n  }\n  divideScaler(t) {\n    const identical = this.identical()\n    const k = 1 / t\n    identical.e[0] *= k\n    identical.e[1] *= k\n    identical.e[2] *= k\n    return identical\n  }\n\n  length() {\n    return Math.sqrt(\n      this.e[0] * this.e[0] + this.e[1] * this.e[1] + this.e[2] * this.e[2]\n    )\n  }\n  squaredLength() {\n    return this.e[0] * this.e[0] + this.e[1] * this.e[1] + this.e[2] * this.e[2]\n  }\n  makeUnitVector() {\n    const k =\n      1 /\n      Math.sqrt(\n        this.e[0] * this.e[0] + this.e[1] * this.e[1] + this.e[2] * this.e[2]\n      )\n    const identical = this.identical()\n    identical.e[0] *= k\n    identical.e[1] *= k\n    identical.e[2] *= k\n    return identical\n  }\n}\n\n// operator>>(is, vec3){\n//   console.log(this.e[0],this.e[1],this.e[2])\n//   return is\n// }\n// operator<<(os, vec3){\n//   console.log(this.e[0],this.e[1],this.e[2])\n//   return os\n// }\n\nexport function dot(v1, v2) {\n  return v1.e[0] * v2.e[0] + v1.e[1] * v2.e[1] + v1.e[2] * v2.e[2]\n}\n\nexport function cross(v1, v2) {\n  return new Vec3(\n    v1.e[1] * v2.e[2] - v1.e[2] * v2.e[1],\n    -(v1.e[0] * v2.e[2] - v1.e[2] * v2.e[0]),\n    v1.e[0] * v2.e[1] - v1.e[1] * v2.e[0]\n  )\n}\n\nexport function unitVector(v) {\n  return v.identical().divideScaler(v.length())\n}\n\nexport function reflect(v, n) {\n  return v.subtractVector(n.multiplyScalar(2 * dot(v, n)))\n}\n\nexport function refract(v, n, niOverNt) {\n  const uv = unitVector(v)\n  const dt = dot(uv, n)\n  const discriminant = 1.0 - niOverNt * niOverNt * (1 - dt * dt)\n  let refracted\n  if (discriminant > 0) {\n    refracted = uv\n      .subtractVector(n.multiplyScalar(dt))\n      .multiplyScalar(niOverNt)\n      .subtractVector(n.multiplyScalar(Math.sqrt(discriminant)))\n  }\n  return {\n    isRefracted: discriminant > 0,\n    refracted,\n  }\n}\n\nexport default function vec3(x, y, z) {\n  return new Vec3(x, y, z)\n}\n","/*\nconst hitRecord = {\n  t,\n  p,\n  normal,\n  material,\n};\n*/\nclass Hitable {\n  hit(ray, tMin, tMax, hitRecord) {}\n}\n\nexport default Hitable\n","import { dot } from \"./vec3\"\nimport Hitable from \"./hitable\"\n\nfunction recordHit(sphere, ray, t, record) {\n  const { center, radius, material } = sphere\n  const p = ray.pointAtParameter(t)\n  record.t = t\n  record.p = p\n  record.normal = p.subtractVector(center).divideScaler(radius)\n  record.material = material\n}\n\nclass Sphere extends Hitable {\n  constructor(c, r, material) {\n    super()\n    this.center = c\n    this.radius = r\n    this.material = material\n  }\n  hit(ray, tMin, tMax, hitRecord) {\n    const oc = ray.origin().subtractVector(this.center)\n    const a = dot(ray.direction(), ray.direction())\n    const b = dot(oc, ray.direction())\n    const c = dot(oc, oc) - this.radius * this.radius\n    const discriminant = b * b - a * c\n    if (discriminant > 0) {\n      const t1 = (-b - Math.sqrt(discriminant)) / a\n      if (t1 < tMax && t1 > tMin) {\n        recordHit(this, ray, t1, hitRecord)\n        return true\n      }\n      const t2 = (-b + Math.sqrt(discriminant)) / a\n      if (t2 < tMax && t2 > tMin) {\n        recordHit(this, ray, t2, hitRecord)\n        return true\n      }\n    }\n    return false\n  }\n}\n\nexport default function sphere(center, radius, material) {\n  return new Sphere(center, radius, material)\n}\n","import Hitable from \"./hitable\"\n\nclass HitableList extends Hitable {\n  constructor(l, n) {\n    super()\n    this.list = l\n    this.listSize = n\n  }\n  hit(ray, tMin, tMax, hitRecord) {\n    const { material } = hitRecord\n    let tempRecord = { material }\n    let hitAnything = false\n    let closestSoFar = tMax\n    for (let i = 0; i < this.listSize; i++) {\n      const isHit = this.list[i].hit(ray, tMin, closestSoFar, tempRecord)\n      if (isHit) {\n        hitAnything = true\n        closestSoFar = tempRecord.t\n        hitRecord = tempRecord\n      }\n    }\n    return { hitAnything, closestSoFar, hitRecord }\n  }\n}\n\nexport default function hitableList(list, listSize) {\n  return new HitableList(list, listSize)\n}\n","/**\n * p(t) = ​ A ​ + t* B\n */\nclass Ray {\n  constructor(A, B) {\n    this.A = A\n    this.B = B\n  }\n  origin() {\n    return this.A\n  }\n  direction() {\n    return this.B\n  }\n  pointAtParameter(t) {\n    return this.A.addVector(this.B.multiplyScalar(t))\n  }\n}\n\nexport default function ray(A, B) {\n  return new Ray(A, B)\n}\n","import vec3, { cross, dot, unitVector } from \"./vec3\"\nimport ray from \"./ray\"\n\nclass Camara {\n  constructor({\n    lookFrom = vec3(0.0, 0.0, 0.0),\n    lookAt = vec3(0.0, 0.0, -1.0),\n    vUp = vec3(0.0, 1.0, 0.0),\n    vFov = 20,\n    aspect = 2,\n    aperture = 0,\n    focusDist = 1,\n  }) {\n    this.lensRadius = aperture / 2\n    const theta = (vFov * Math.PI) / 180\n    const halfHeight = Math.tan(theta / 2)\n    const halfWidth = aspect * halfHeight\n    this.origin = lookFrom\n    const w = unitVector(lookFrom.subtractVector(lookAt))\n    this.u = unitVector(cross(vUp, w))\n    this.v = cross(w, this.u)\n    // let lowerLeftCorner = vec3(-halfWidth, -halfHeight, -1.0)\n    this.lowerLeftCorner = this.origin\n      .subtractVector(this.u.multiplyScalar(halfWidth * focusDist))\n      .subtractVector(this.v.multiplyScalar(halfHeight * focusDist))\n      .subtractVector(w.multiplyScalar(focusDist))\n    this.horizontal = this.u.multiplyScalar(2 * halfWidth * focusDist)\n    this.vertical = this.v.multiplyScalar(2 * halfHeight * focusDist)\n  }\n  getRay(s, t) {\n    const rd = randomInUnitDisk().multiplyScalar(this.lensRadius)\n    const offset = this.u\n      .multiplyScalar(rd.x())\n      .addVector(this.v.multiplyScalar(rd.y()))\n    return ray(\n      this.origin.addVector(offset),\n      this.lowerLeftCorner\n        .addVector(this.horizontal.multiplyScalar(s))\n        .addVector(this.vertical.multiplyScalar(t))\n        .subtractVector(this.origin)\n        .subtractVector(offset)\n    )\n  }\n}\n\nfunction randomInUnitDisk() {\n  let p\n  do {\n    p = vec3(Math.random(), Math.random(), 0)\n      .multiplyScalar(2)\n      .subtractVector(vec3(1, 1, 0))\n  } while (dot(p, p) >= 1.0)\n  return p\n}\n\nexport default function camara({\n  lookFrom,\n  lookAt,\n  vUp,\n  vFov,\n  aspect,\n  aperture,\n  focusDist,\n}) {\n  return new Camara({\n    lookFrom,\n    lookAt,\n    vUp,\n    vFov,\n    aspect,\n    aperture,\n    focusDist,\n  })\n}\n","import vec3, { dot, unitVector, reflect, refract } from \"./vec3\"\nimport ray from \"./ray\"\nimport { randomInUnitSphere } from \"./helpers\"\n\nclass Material {}\n\nclass Lambertian extends Material {\n  constructor(a) {\n    super()\n    this.albedo = a\n  }\n  scatter(rayIn, hitRecord) {\n    const { p, normal } = hitRecord\n    const target = p.addVector(normal).addVector(randomInUnitSphere())\n    const scattered = ray(p, target.subtractVector(p))\n    const attenuation = this.albedo\n    return {\n      isScatter: true,\n      scattered,\n      attenuation,\n    }\n  }\n}\n\nclass Metal extends Material {\n  constructor(a, f) {\n    super()\n    this.albedo = a\n    this.fuzz = f < 1 ? f : 1\n  }\n  scatter(rayIn, hitRecord) {\n    const { p, normal } = hitRecord\n    const reflected = reflect(unitVector(rayIn.direction()), normal)\n    const scattered = ray(\n      p,\n      reflected.addVector(randomInUnitSphere().multiplyScalar(this.fuzz))\n    )\n    const attenuation = this.albedo\n    return {\n      isScatter: dot(scattered.direction(), normal) > 0,\n      scattered,\n      attenuation,\n    }\n  }\n}\n\nclass Dielectric extends Material {\n  constructor(ri) {\n    super()\n    this.refIndex = ri\n  }\n  scatter(rayIn, hitRecord) {\n    const { p, normal } = hitRecord\n    let outwardNormal\n    const reflected = reflect(unitVector(rayIn.direction()), normal)\n    let niOverNt\n    const attenuation = vec3(1.0, 1.0, 1.0)\n    let scattered\n    let reflectProb\n    let cosine\n    if (dot(rayIn.direction(), normal) > 0) {\n      outwardNormal = normal.opposite()\n      niOverNt = this.refIndex\n      cosine =\n        (this.refIndex * dot(rayIn.direction(), normal)) /\n        rayIn.direction().length()\n    } else {\n      outwardNormal = normal\n      niOverNt = 1.0 / this.refIndex\n      cosine = -dot(rayIn.direction(), normal) / rayIn.direction().length()\n    }\n    const { isRefracted, refracted } = refract(\n      rayIn.direction(),\n      outwardNormal,\n      niOverNt\n    )\n    if (isRefracted) {\n      reflectProb = schlick(cosine, this.refIndex)\n    } else {\n      scattered = ray(p, reflected)\n      reflectProb = 1.0\n    }\n    if (Math.random() < reflectProb) {\n      scattered = ray(p, reflected)\n    } else {\n      scattered = ray(p, refracted)\n    }\n    return {\n      isScatter: true,\n      scattered,\n      attenuation,\n    }\n  }\n}\n\nfunction schlick(cosine, refIndex) {\n  let r0 = (1 - refIndex) / (1 + refIndex)\n  r0 = r0 * r0\n  return r0 + (1 - r0) * Math.pow(1 - cosine, 5)\n}\n\nexport const lambertian = a => new Lambertian(a)\nexport const metal = (a, f) => new Metal(a, f)\nexport const dielectric = ri => new Dielectric(ri)\n","import vec3, { unitVector } from \"./vec3\"\nimport sphere from \"./sphere\"\nimport hitableList from \"./hitable-list\"\nimport camara from \"./camera\"\nimport { lambertian, metal, dielectric } from \"./material\"\n\nexport function setRectangle(x, y, width, height) {\n  const x1 = x\n  const x2 = x + width\n  const y1 = y\n  const y2 = y + height\n  return [x1, y1, x2, y1, x1, y2, x1, y2, x2, y1, x2, y2]\n}\n\nexport function randomInUnitSphere() {\n  let p = vec3()\n  do {\n    p = vec3(Math.random(), Math.random(), Math.random()).subtractVector(\n      vec3(1, 1, 1)\n    )\n  } while (p.squaredLength() >= 1.0)\n  return p\n}\n\nfunction color(r, world, depth) {\n  const { hitAnything, hitRecord } = world.hit(\n    r,\n    0.0,\n    Infinity,\n    {}\n  )\n  if (hitAnything) {\n    const { material } = hitRecord\n    const { isScatter, scattered, attenuation } = material.scatter(r, hitRecord)\n    if (depth < 50 && isScatter) {\n      return attenuation.multiplyVector(color(scattered, world, depth + 1))\n    } else {\n      return vec3(0, 0, 0)\n    }\n  } else {\n    const unitDirection = unitVector(r.direction())\n    const t = 0.5 * (unitDirection.y() + 1.0)\n    return vec3(1.0, 1.0, 1.0)\n      .multiplyScalar(1.0 - t)\n      .addVector(vec3(0.5, 0.7, 1.0).multiplyScalar(t))\n  }\n}\n\nexport function initImage(width, height) {\n  const scene = randomScene()\n  let image = []\n  let colorMap = []\n  for (let j = height - 1; j >= 0; j--) {\n    let arr = []\n    for (let i = 0; i < width; i++) {\n      image.push(-1)\n      image.push(-1)\n      image.push(-1)\n      image.push(255)\n      arr.push(vec3(0, 0, 0))\n    }\n    colorMap.push(arr)\n  }\n  return { image, colorMap, scene }\n}\n\nexport function* getImage({ scene, width, height, colorMap, iteration }) {\n  const lookFrom = vec3(12, 2, 4)\n  const lookAt = vec3(0, 0, 0)\n  const focusDist = lookFrom.subtractVector(lookAt).length()\n  const aperture = 0.1\n  const eye = camara({\n    lookFrom,\n    lookAt,\n    vUp: vec3(0, 1, 0),\n    vFov: 20,\n    aspect: width / height,\n    aperture,\n    focusDist,\n  })\n  function next() {\n    const image = []\n    for (let j = height - 1; j >= 0; j--) {\n      for (let i = 0; i < width; i++) {\n        const u = (i + Math.random()) / width\n        const v = (j + Math.random()) / height\n        const r = eye.getRay(u, v)\n        colorMap[j][i] = colorMap[j][i]\n          .identical()\n          .addVector(color(r, scene, 0))\n        const avgCol = colorMap[j][i].divideScaler(iteration)\n        const ir = 255.99 * Math.sqrt(avgCol.e[0])\n        const ig = 255.99 * Math.sqrt(avgCol.e[1])\n        const ib = 255.99 * Math.sqrt(avgCol.e[2])\n        image.push(ir)\n        image.push(ig)\n        image.push(ib)\n        image.push(255)\n      }\n    }\n    return { image, colorMap }\n  }\n\n  yield next()\n}\n\nfunction randomScene() {\n  const list = []\n  list.push(sphere(vec3(0, -1000, 0), 1000, lambertian(vec3(0.5, 0.5, 0.5))))\n  for (let a = -9; a < 9; a += 3) {\n    for (let b = -9; b < 9; b += 3) {\n      const chooseMat = Math.random()\n      const center = vec3(a + 2 * Math.random(), 0.3, b + 2 * Math.random())\n      if (center.subtractVector(vec3(4, 0.2, 0)).length() > 0.9) {\n        if (chooseMat < 0.8) {\n          // diffuse\n          list.push(\n            sphere(\n              center,\n              0.3,\n              lambertian(\n                vec3(\n                  Math.random() * Math.random(),\n                  Math.random() * Math.random(),\n                  Math.random() * Math.random()\n                )\n              )\n            )\n          )\n        } else if (chooseMat < 0.95) {\n          // metal\n          list.push(\n            sphere(\n              center,\n              0.3,\n              metal(\n                vec3(\n                  0.5 * (1 + Math.random()),\n                  0.5 * (1 + Math.random()),\n                  0.5 * (1 + Math.random())\n                ),\n                0.5 * Math.random()\n              )\n            )\n          )\n        } else {\n          // glass\n          list.push(sphere(center, 0.3, dielectric(1.5)))\n        }\n      }\n    }\n  }\n\n  list.push(sphere(vec3(0, 1, 0), 1.0, dielectric(1.5)))\n  list.push(sphere(vec3(-4, 1, 0), 1.0, lambertian(vec3(0.4, 0.2, 0.1))))\n  list.push(sphere(vec3(4, 1, 0), 1.0, metal(vec3(0.7, 0.6, 0.5), 0.0)))\n\n  return hitableList(list, list.length)\n}\n","export function initShaderProgram(gl, vsSource, fsSource) {\n  const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource)\n  const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource)\n\n  const shaderProgram = gl.createProgram()\n  gl.attachShader(shaderProgram, vertexShader)\n  gl.attachShader(shaderProgram, fragmentShader)\n  gl.linkProgram(shaderProgram)\n\n  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n    alert(\n      \"Unable to initialize the shader program: \" +\n        gl.getProgramInfoLog(shaderProgram)\n    )\n    return null\n  }\n\n  return shaderProgram\n}\n\nfunction loadShader(gl, type, source) {\n  const shader = gl.createShader(type)\n\n  gl.shaderSource(shader, source)\n\n  gl.compileShader(shader)\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    alert(\n      \"An error occurred compiling the shaders: \" + gl.getShaderInfoLog(shader)\n    )\n    gl.deleteShader(shader)\n    return null\n  }\n\n  return shader\n}\n","import vShaderSource from \"./shaders/vertex.vert\"\nimport fShaderSource from \"./shaders/fragment.frag\"\nimport { setRectangle } from \"./helpers\"\nimport { initShaderProgram } from \"./gl-helpers\"\n\nconst texPositions = [\n  0.0,\n  0.0,\n  1.0,\n  0.0,\n  0.0,\n  1.0,\n  0.0,\n  1.0,\n  1.0,\n  0.0,\n  1.0,\n  1.0,\n]\n\nfunction initBuffers(gl, image) {\n  const { width, height } = gl.canvas\n  const positions = setRectangle(0, 0, width, height)\n\n  const positionBuffer = gl.createBuffer()\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW)\n\n  const texCoordBuffer = gl.createBuffer()\n  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer)\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(texPositions), gl.STATIC_DRAW)\n  const tex = gl.createTexture()\n  gl.bindTexture(gl.TEXTURE_2D, tex)\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0, // level\n    gl.RGBA, // internal format\n    width, // width\n    height, // height\n    0, // border\n    gl.RGBA, // format\n    gl.UNSIGNED_BYTE, // type\n    new Uint8Array(image) // data\n  )\n\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n\n  return {\n    position: positionBuffer,\n    texCoord: texCoordBuffer,\n  }\n}\n\nfunction drawScene(gl, programInfo, buffers) {\n  const { width, height } = gl.canvas\n  // Tell WebGL how to convert from clip space to pixels\n  gl.viewport(0, 0, width, height)\n\n  gl.clearColor(0.0, 0.0, 0.0, 1.0) // Clear to black, fully opaque\n  gl.clear(gl.COLOR_BUFFER_BIT)\n\n  gl.useProgram(programInfo.program)\n\n  {\n    const positionLocation = programInfo.attribLocations.vertexPosition\n    const numComponents = 2\n    const type = gl.FLOAT\n    const normalize = false\n    const stride = 0\n    const offset = 0\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position)\n    gl.vertexAttribPointer(\n      positionLocation,\n      numComponents,\n      type,\n      normalize,\n      stride,\n      offset\n    )\n    gl.enableVertexAttribArray(positionLocation)\n  }\n\n  {\n    const texCoordLocation = programInfo.attribLocations.texCoordLocation\n    const size = 2 // 2 components per iteration\n    const type = gl.FLOAT // the data is 32bit floats\n    const normalize = false // don't normalize the data\n    const stride = 0 // 0 = move forward size * sizeof(type) each iteration to get the next position\n    const offset = 0 // start at the beginning of the buffer\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.texCoord)\n    gl.vertexAttribPointer(\n      texCoordLocation,\n      size,\n      type,\n      normalize,\n      stride,\n      offset\n    )\n    gl.enableVertexAttribArray(texCoordLocation)\n  }\n\n  gl.uniform2f(\n    programInfo.uniformLocations.resolutionUniformLocation,\n    width,\n    height\n  )\n\n  {\n    const primitiveType = gl.TRIANGLES\n    const offset = 0\n    const count = 6\n    gl.drawArrays(primitiveType, offset, count)\n  }\n}\n\nexport default function render(gl, image) {\n  if (!gl) {\n    alert(\n      \"Unable to initialize WebGL. Your browser or machine may not support it.\"\n    )\n    return\n  }\n  gl.createProgram()\n  const shaderProgram = initShaderProgram(gl, vShaderSource, fShaderSource)\n  const programInfo = {\n    program: shaderProgram,\n    attribLocations: {\n      vertexPosition: gl.getAttribLocation(shaderProgram, \"aVertexPosition\"),\n      texCoordLocation: gl.getAttribLocation(shaderProgram, \"aVertexTexCoord\"),\n    },\n    uniformLocations: {\n      resolutionUniformLocation: gl.getUniformLocation(\n        shaderProgram,\n        \"uResolution\"\n      ),\n    },\n  }\n\n  const buffers = initBuffers(gl, image)\n\n  drawScene(gl, programInfo, buffers)\n}\n","export default \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aVertexTexCoord;\\n\\nuniform vec2 uResolution;\\n\\nvarying vec2 vTexCoord;\\n\\nvoid main() {\\n    // convert the rectangle from pixels to 0.0 to 1.0\\n   vec2 zeroToOne = aVertexPosition / uResolution;\\n\\n   // convert from 0->1 to 0->2\\n   vec2 zeroToTwo = zeroToOne * 2.0;\\n\\n   // convert from 0->2 to -1->+1 (clipspace)\\n   vec2 clipSpace = zeroToTwo - 1.0;\\n\\n   gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\\n\\n   // pass the texCoord to the fragment shader\\n   // The GPU will interpolate this value between points.\\n   vTexCoord = aVertexTexCoord;\\n}\\n\";","export default \"precision mediump float;\\n#define GLSLIFY 1\\n\\n// our texture\\nuniform sampler2D tex;\\n\\n// the texCoords passed in from the vertex shader.\\nvarying vec2 vTexCoord;\\n\\nvoid main() {\\n   gl_FragColor = texture2D(tex, vTexCoord);\\n}\\n\";","import React, { useEffect, useRef } from \"react\"\nimport PureCanvas from \"./pure-canvas\"\nimport render from \"../../lib/ray-tracing/render\"\n\nfunction Canvas({ width, height, image }) {\n  const glRef = useRef()\n\n  useEffect(() => {\n    if (glRef.current) {\n      render(glRef.current, image)\n    }\n  }, [image])\n\n  function _saveContext(gl) {\n    glRef.current = gl\n  }\n\n  return <PureCanvas contextRef={_saveContext} width={width} height={height} />\n}\n\nexport default Canvas\n","import React, { memo } from \"react\"\n\nfunction PureCanvas({ width, height, contextRef }) {\n  return (\n    <canvas\n      width={width}\n      height={height}\n      ref={node => (node ? contextRef(node.getContext(\"webgl\")) : null)}\n    />\n  )\n}\n\nfunction areEqual() {\n  return false\n}\n\nexport default memo(PureCanvas, areEqual)\n"],"sourceRoot":""}