{"version":3,"sources":["webpack://village/./node_modules/d3-geo-projection/src/math.js","webpack://village/./node_modules/d3-geo-projection/src/airy.js","webpack://village/./node_modules/d3-geo-projection/src/aitoff.js","webpack://village/./node_modules/d3-geo-projection/src/armadillo.js","webpack://village/./node_modules/d3-geo-projection/src/august.js","webpack://village/./node_modules/d3-geo-projection/src/baker.js","webpack://village/./node_modules/d3-geo-projection/src/berghaus.js","webpack://village/./node_modules/d3-geo-projection/src/hammer.js","webpack://village/./node_modules/d3-geo-projection/src/newton.js","webpack://village/./node_modules/d3-geo-projection/src/bertin.js","webpack://village/./node_modules/d3-geo-projection/src/mollweide.js","webpack://village/./node_modules/d3-geo-projection/src/boggs.js","webpack://village/./node_modules/d3-geo-projection/src/parallel1.js","webpack://village/./node_modules/d3-geo-projection/src/sinusoidal.js","webpack://village/./node_modules/d3-geo-projection/src/bonne.js","webpack://village/./node_modules/d3-geo-projection/src/bottomley.js","webpack://village/./node_modules/d3-geo-projection/src/bromley.js","webpack://village/./node_modules/d3-geo-projection/src/chamberlin.js","webpack://village/./node_modules/d3-geo-projection/src/collignon.js","webpack://village/./node_modules/d3-geo-projection/src/craig.js","webpack://village/./node_modules/d3-geo-projection/src/craster.js","webpack://village/./node_modules/d3-geo-projection/src/cylindricalEqualArea.js","webpack://village/./node_modules/d3-geo-projection/src/cylindricalStereographic.js","webpack://village/./node_modules/d3-geo-projection/src/eckert1.js","webpack://village/./node_modules/d3-geo-projection/src/eckert2.js","webpack://village/./node_modules/d3-geo-projection/src/eckert3.js","webpack://village/./node_modules/d3-geo-projection/src/eckert4.js","webpack://village/./node_modules/d3-geo-projection/src/eckert5.js","webpack://village/./node_modules/d3-geo-projection/src/eckert6.js","webpack://village/./node_modules/d3-geo-projection/src/eisenlohr.js","webpack://village/./node_modules/d3-geo-projection/src/fahey.js","webpack://village/./node_modules/d3-geo-projection/src/foucaut.js","webpack://village/./node_modules/d3-geo-projection/src/foucautSinusoidal.js","webpack://village/./node_modules/d3-geo-projection/src/gilbert.js","webpack://village/./node_modules/d3-geo-projection/src/gingery.js","webpack://village/./node_modules/d3-geo-projection/src/ginzburgPolyconic.js","webpack://village/./node_modules/d3-geo-projection/src/ginzburg4.js","webpack://village/./node_modules/d3-geo-projection/src/ginzburg5.js","webpack://village/./node_modules/d3-geo-projection/src/ginzburg6.js","webpack://village/./node_modules/d3-geo-projection/src/ginzburg8.js","webpack://village/./node_modules/d3-geo-projection/src/ginzburg9.js","webpack://village/./node_modules/d3-geo-projection/src/square.js","webpack://village/./node_modules/d3-geo-projection/src/gringorten.js","webpack://village/./node_modules/d3-geo-projection/src/elliptic.js","webpack://village/./node_modules/d3-geo-projection/src/guyou.js","webpack://village/./node_modules/d3-geo-projection/src/hammerRetroazimuthal.js","webpack://village/./node_modules/d3-geo-projection/src/healpix.js","webpack://village/./node_modules/d3-geo-projection/src/hill.js","webpack://village/./node_modules/d3-geo-projection/src/sinuMollweide.js","webpack://village/./node_modules/d3-geo-projection/src/homolosine.js","webpack://village/./node_modules/d3-geo-projection/src/hufnagel.js","webpack://village/./node_modules/d3-geo-projection/src/integrate.js","webpack://village/./node_modules/d3-geo-projection/src/hyperelliptical.js","webpack://village/./node_modules/d3-geo-projection/src/interrupted/index.js","webpack://village/./node_modules/d3-geo-projection/src/interrupted/boggs.js","webpack://village/./node_modules/d3-geo-projection/src/interrupted/homolosine.js","webpack://village/./node_modules/d3-geo-projection/src/interrupted/mollweide.js","webpack://village/./node_modules/d3-geo-projection/src/interrupted/mollweideHemispheres.js","webpack://village/./node_modules/d3-geo-projection/src/interrupted/sinuMollweide.js","webpack://village/./node_modules/d3-geo-projection/src/interrupted/sinusoidal.js","webpack://village/./node_modules/d3-geo-projection/src/kavrayskiy7.js","webpack://village/./node_modules/d3-geo-projection/src/lagrange.js","webpack://village/./node_modules/d3-geo-projection/src/larrivee.js","webpack://village/./node_modules/d3-geo-projection/src/laskowski.js","webpack://village/./node_modules/d3-geo-projection/src/littrow.js","webpack://village/./node_modules/d3-geo-projection/src/loximuthal.js","webpack://village/./node_modules/d3-geo-projection/src/miller.js","webpack://village/./node_modules/d3-geo-projection/src/modifiedStereographic.js","webpack://village/./node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js","webpack://village/./node_modules/d3-geo-projection/src/mtFlatPolarQuartic.js","webpack://village/./node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js","webpack://village/./node_modules/d3-geo-projection/src/naturalEarth2.js","webpack://village/./node_modules/d3-geo-projection/src/nellHammer.js","webpack://village/./node_modules/d3-geo-projection/src/interrupted/quarticAuthalic.js","webpack://village/./node_modules/d3-geo-projection/src/nicolosi.js","webpack://village/./node_modules/d3-geo-projection/src/patterson.js","webpack://village/./node_modules/d3-geo-projection/src/polyconic.js","webpack://village/./node_modules/d3-geo-projection/src/polyhedral/matrix.js","webpack://village/./node_modules/d3-geo-projection/src/polyhedral/index.js","webpack://village/./node_modules/d3-geo-projection/src/polyhedral/octahedron.js","webpack://village/./node_modules/d3-geo-projection/src/polyhedral/butterfly.js","webpack://village/./node_modules/d3-geo-projection/src/polyhedral/collignon.js","webpack://village/./node_modules/d3-geo-projection/src/polyhedral/waterman.js","webpack://village/./node_modules/d3-geo-projection/src/noop.js","webpack://village/./node_modules/d3-geo-projection/src/project/index.js","webpack://village/./node_modules/d3-geo-projection/src/project/clockwise.js","webpack://village/./node_modules/d3-geo-projection/src/project/contains.js","webpack://village/./node_modules/d3-geo-projection/src/quincuncial/index.js","webpack://village/./node_modules/d3-geo-projection/src/quincuncial/gringorten.js","webpack://village/./node_modules/d3-geo-projection/src/quincuncial/peirce.js","webpack://village/./node_modules/d3-geo-projection/src/quantize.js","webpack://village/./node_modules/d3-geo-projection/src/rectangularPolyconic.js","webpack://village/./node_modules/d3-geo-projection/src/robinson.js","webpack://village/./node_modules/d3-geo-projection/src/satellite.js","webpack://village/./node_modules/d3-geo-projection/src/stitch.js","webpack://village/./node_modules/d3-geo-projection/src/times.js","webpack://village/./node_modules/d3-geo-projection/src/twoPoint.js","webpack://village/./node_modules/d3-geo-projection/src/twoPointAzimuthal.js","webpack://village/./node_modules/d3-geo-projection/src/twoPointEquidistant.js","webpack://village/./node_modules/d3-geo-projection/src/vanDerGrinten.js","webpack://village/./node_modules/d3-geo-projection/src/vanDerGrinten2.js","webpack://village/./node_modules/d3-geo-projection/src/vanDerGrinten3.js","webpack://village/./node_modules/d3-geo-projection/src/vanDerGrinten4.js","webpack://village/./node_modules/d3-geo-projection/src/wagner.js","webpack://village/./node_modules/d3-geo-projection/src/wagner4.js","webpack://village/./node_modules/d3-geo-projection/src/wagner6.js","webpack://village/./node_modules/d3-geo-projection/src/wiechel.js","webpack://village/./node_modules/d3-geo-projection/src/winkel3.js","webpack://village/./node_modules/topojson/node_modules/topojson-client/src/identity.js","webpack://village/./node_modules/topojson/node_modules/topojson-client/src/feature.js","webpack://village/./node_modules/topojson/node_modules/topojson-client/src/transform.js","webpack://village/./node_modules/topojson/node_modules/topojson-client/src/reverse.js","webpack://village/./node_modules/topojson/node_modules/topojson-server/src/hash/point-hash.js","webpack://village/./node_modules/topojson/node_modules/topojson-simplify/src/spherical.js","webpack://village/./src/lib/geo/utils.js","webpack://village/./src/pages/geo/canvas.js","webpack://village/./src/pages/geo/pure-canvas.js"],"names":["abs","Math","atan","atan2","cos","ceil","exp","floor","log","max","min","pow","round","sign","x","sin","tan","epsilon","epsilon2","pi","PI","halfPi","quarterPi","sqrt1_2","SQRT1_2","sqrt2","sqrt","sqrtPi","tau","degrees","radians","asin","acos","sinh","cosh","airyRaw","beta","tanBeta_2","b","forward","y","cosx","cosy","siny","cosz","k","invert","delta","r","z","i","z_2","cosz_2","sinz_2","tanz_2","lnsecz_2","sinz","m","p","radius","_","arguments","length","scale","clipAngle","aitoffRaw","sincia","sinci","armadilloRaw","phi0","sinPhi0","cosPhi0","sPhi0","tanPhi0","lambda","phi","cosPhi","cosLambda","sinLambda","sinPhi","A","fx","fy","dxdLambda","dxdPhi","dydLambda","dydPhi","denominator","dLambda","dPhi","stream_","stream","parallel","rotate","rotateStream","sphereStream","precision","sphere","polygonStart","lineStart","point","lineEnd","polygonEnd","center","augustRaw","tanPhi","c","x2","y2","x1","y1","f","sinx","sinx_2","cosx_2","sin_2y","sin2y","cos2y","sin2x_2","e","dxdx","dxdy","dydx","dydy","dx","dy","s","sin3Eta","eta","xi","arcosh","arsinh","cosEta","coshXi","d","sqrt8","bakerRaw","y0","cosPhi_2","tanPhi_2","berghausRaw","lobes","azimuthalEquidistant","theta","theta0","alpha","cotAlpha","projectionStream","cr","sr","delta0","hammerRaw","B","azimuthalEqualArea","Infinity","hammerQuarticAuthalicRaw","coordinates","coefficient","solve","f0","f1","steps","undefined","NaN","solve2d","MAX_ITERATIONS","eps","a","err2","da","db","tx","ty","h","ea","eb","pa","pb","dxa","dya","dxb","dyb","D","l","bertin1953Raw","hammer","u","mollweideBromleyTheta","cp","cpsinPhi","mollweideBromleyRaw","cx","cy","mollweideRaw","w","boggsRaw","projectAt","sinusoidalRaw","bonneRaw","cotPhi0","rho","parallel1","bottomleyRaw","sinPsi","fraction","ky","bromleyRaw","distance","c1","s1","c2","s2","cosdLambda","sindPhi","sindLambda","angle","longitude","chamberlinRaw","p0","p1","p2","points","v","beta0","beta1","beta2","mean","Array","slice","j","pointRadians","chamberlinAfrica","chamberlin","centroid","type","R","rotation","collignonRaw","craigRaw","sqrt3","crasterRaw","cylindricalEqualAreaRaw","cylindricalStereographicRaw","eckert1Raw","eckert2Raw","eckert3Raw","eckert4Raw","eckert5Raw","eckert6Raw","eisenlohrK","eisenlohrRaw","s0","c0","t","_0","_1","cos1","t2","v2","vm1v","vp1v","deltatDeltaLambda","deltatDeltaPhi","deltacDeltat","deltacDeltaLambda","deltacDeltaPhi","deltavDeltaLambda","deltavDeltaPhi","deltaxDeltaLambda","deltaxDeltaPhi","deltayDeltaLambda","deltayDeltaPhi","deltaLambda","deltaPhi","faheyK","faheyRaw","foucautRaw","cosk","foucautSinusoidalRaw","equatorial","raw","ratio","cosphi","sinphi","forwardMeridian","gilbertForward","gilbertInvert","projectionType","projection","equirectangular","translate","gilbert","property","name","apply","gingeryRaw","n","rho2","r2","rhoCosAlpha","k_","s_","gingeryLength","gingeryIntegrate","dTheta","x_halfPi","rhosinAlpha","sinRhoCosAlpha","halfPi_RhoCosAlpha","y_","cRho","sRho","g","phi2","xB","yB","q","m2","dAlphadLambda","xB2","dxBdPhi","dyBdPhi","dmdPhi","cosAlpha","sinAlpha","mcosAlpha","msinAlpha","dAlphadPhi","ginzburg4Raw","ginzburgPolyconic","ginzburg5Raw","ginzburg6Raw","ginzburg8Raw","lambda2","lambda4","ginzburg9Raw","project","projectSquare","location","gringortenRaw","sLambda","sPhi","a2","secPhi","drdPhi","dp2dPhi","mu","nu","zeta","lambda1","x0","g2","zetaMug","f2","gringortenHexadecant","square","ellipticJ","ai","twon","ellipticF","guyouRaw","K","psi","at","y_1","guyouComplexAtan","sinhPsi","cscPhi","cotPhi2","cotLambda2","ellipticFi","sx","sy","gringortenHexadecantInvert","tn","guyouComplexDivide","hammerRetroazimuthalRaw","hammerRetroazimuthalRotation","rotate_","circle","call","ring","healpixParallel","healpixLambert","healpixRaw","H","dy1","sphereTop","sphereBottom","sphereNudge","step","concat","map","hillRaw","L","Bt","rho0","K2","L2","omega","sinTheta","cosTheta","Bt_Bt1","C","sinuMollweidePhi","sinuMollweideY","sinuMollweideRaw","homolosineRaw","hufnagelRaw","psiMax","M","mapping","inversemapping","isNaN","kr","mutate","adsimp","fa","fm","fb","V0","tol","maxdepth","depth","state","nanEncountered","sl","V1","V2","err","maxDepthCount","integrate","hyperellipticalRaw","gamma","elliptic","G","approx","push","Y","rmin","rmax","pointEqual","interpolateLine","resampled","interpolateSphere","lobe","lambda0","phi1","inverse","bounds","bound","kavrayskiy7Raw","lagrangeRaw","spacing","pi_sqrt2","larriveeRaw","laskowskiRaw","littrowRaw","loximuthalRaw","millerRaw","modifiedStereographicRaw","zr","zi","ar","br","bi","deltar","deltai","sinc","sqrtcosPhi","sinPhi_2","sinLambda_6","cosLambda_6","df0dPhi","df0dLambda","df1dPhi","df1dLambda","denom","lambdaPhi","y2_1","x2_y2_1","alaska","gs48","gs50","lee","modifiedStereographicAlaska","modifiedStereographic","modifiedStereographicGs48","modifiedStereographicGs50","modifiedStereographicMiller","modifiedStereographicLee","coefficients","sqrt6","sqrt7","mtFlatPolarParabolicRaw","mtFlatPolarQuarticRaw","mtFlatPolarSinusoidalRaw","sinTheta_2","naturalEarth2Raw","phi4","phi6","nellHammerRaw","nicolosiRaw","b2","d2","b2d2","d2b2","N","x2y2","pi2","pattersonK1","pattersonK2","pattersonK3","pattersonK4","pattersonYmax","pattersonRaw","polyconicRaw","yc","subtract","multiply","root","face","node","transform","faceInvert","faceDegrees","children","recurse","parent","edges","faceEdges","shared","found","sharedEdge","matrix","forEach","child","hasInverse","proj","outline","edge","multiPoint","notPoles","filter","inside","isArray","interpolate","some","octahedron","faceProjection","gnomonic","faces","polyhedral","kx","collignonK","w5","xyz","cartesian","hexagon","spherical","cornerNormals","parents","normals","dot","object","Error","projectFeature","projectFeatureCollection","projectGeometry","o","features","id","properties","geometry","geometries","projectGeometryCollection","sink","sinkPoint","sinkLine","sinkPolygon","result","lines","noop","polygons","holes","area","clockwise","hole","polygon","contains","yi","pj","xj","yj","projectQuincuncial","quincuncial","input","digits","quantizePoint","output","toFixed","quantizePoints","quantizePointsNoDuplicates","point0","quantizePolygon","quantizeGeometry","bbox","quantizeFeature","rectangularPolyconicRaw","E","cotPhi","robinsonRaw","i0","di","ax","ay","bx","by","satelliteRaw","P","vertical","satelliteVerticalRaw","cosOmega","sinOmega","tilt","yy","x0e","x1e","y0e","y1e","nonempty","normalizePoint","clampPoint","clamped","clampPoints","extractFragments","rings","fragments","index","pointk","xk","yk","fragmentBefore","pop","stitchFragments","fragment","start","startFragment","end","endFragment","fragmentByStart","fragmentByEnd","stitchFeature","stitchGeometry","timesRaw","twoPointAzimuthalRaw","cosd","twoPointAzimuthalUsa","twoPointAzimuthal","twoPoint","twoPointEquidistantRaw","z0","lambdaa","lambdab","z02","tanLambda0","S","za","zb","cosza","coszb","twoPointEquidistantUsa","twoPointEquidistant","vanDerGrintenRaw","A2","P2","P2_A2","G_P2","Q","vanDerGrinten2Raw","vanDerGrinten3Raw","vanDerGrinten4Raw","B2","C2","BC","B_C2","B_3C","D2","wagnerRaw","poleline","parallels","inflation","vratio","m1","t1","wagnerFormula","wagner","wagner7","x2_y2","c3","a1","theta1","C_","B_C","F_","sqrtF","wagner4Raw","wagner6Raw","wiechelRaw","sin1_Phi","winkel3Raw","topology","transformPoint","identity","arcs","arc","array","reverse","line","F","sin_2phi","sin2phi","cos2phi","sinlambda","coslambda_2","sinlambda_2","sin2lambda_2","dxdlambda","dxdphi","dydlambda","dydphi","dlambda","dphi","buffer","ArrayBuffer","Float64Array","Uint32Array","d3","Object","assign","d3js","d3geo","geoprojection","geoRotatePhi","cosDeltaPhi","sinDeltaPhi","console","geoClipCircle","preclip","camera","clipDistance","transforms","geoPipeline","width","height","geoSatellite","graticule","geoGraticule10","land110","topojson","land50m","land110m","land","canvasRef","useRef","_map","useCallback","context","path","save","beginPath","clip","fillStyle","fillRect","strokeStyle","stroke","fill","restore","_updateCanvas","current","getContext","useEffect","contextRef","canvas","PureCanvas","ref","areEqual","memo"],"mappings":"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","file":"3f4f75389343b610ad7ea9b50b7c620a1fb1da6b-76c830518ef57378aa40.js","sourcesContent":["export var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var ceil = Math.ceil;\nexport var cos = Math.cos;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var max = Math.max;\nexport var min = Math.min;\nexport var pow = Math.pow;\nexport var round = Math.round;\nexport var sign = Math.sign || function (x) {\n  return x > 0 ? 1 : x < 0 ? -1 : 0;\n};\nexport var sin = Math.sin;\nexport var tan = Math.tan;\nexport var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var sqrt1_2 = Math.SQRT1_2;\nexport var sqrt2 = sqrt(2);\nexport var sqrtPi = sqrt(pi);\nexport var tau = pi * 2;\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\nexport function sinci(x) {\n  return x ? x / Math.sin(x) : 1;\n}\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\nexport function sqrt(x) {\n  return x > 0 ? Math.sqrt(x) : 0;\n}\nexport function tanh(x) {\n  x = exp(2 * x);\n  return (x - 1) / (x + 1);\n}\nexport function sinh(x) {\n  return (exp(x) - exp(-x)) / 2;\n}\nexport function cosh(x) {\n  return (exp(x) + exp(-x)) / 2;\n}\nexport function arsinh(x) {\n  return log(x + sqrt(x * x + 1));\n}\nexport function arcosh(x) {\n  return log(x + sqrt(x * x - 1));\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { abs, asin, atan2, cos, degrees, epsilon, halfPi, log, radians, sin, sqrt, tan } from \"./math.js\";\nexport function airyRaw(beta) {\n  var tanBeta_2 = tan(beta / 2),\n      b = 2 * log(cos(beta / 2)) / (tanBeta_2 * tanBeta_2);\n\n  function forward(x, y) {\n    var cosx = cos(x),\n        cosy = cos(y),\n        siny = sin(y),\n        cosz = cosy * cosx,\n        k = -((1 - cosz ? log((1 + cosz) / 2) / (1 - cosz) : -0.5) + b / (1 + cosz));\n    return [k * cosy * sin(x), k * siny];\n  }\n\n  forward.invert = function (x, y) {\n    var r = sqrt(x * x + y * y),\n        z = -beta / 2,\n        i = 50,\n        delta;\n    if (!r) return [0, 0];\n\n    do {\n      var z_2 = z / 2,\n          cosz_2 = cos(z_2),\n          sinz_2 = sin(z_2),\n          tanz_2 = sinz_2 / cosz_2,\n          lnsecz_2 = -log(abs(cosz_2));\n      z -= delta = (2 / tanz_2 * lnsecz_2 - b * tanz_2 - r) / (-lnsecz_2 / (sinz_2 * sinz_2) + 1 - b / (2 * cosz_2 * cosz_2)) * (cosz_2 < 0 ? 0.7 : 1);\n    } while (abs(delta) > epsilon && --i > 0);\n\n    var sinz = sin(z);\n    return [atan2(x * sinz, r * cos(z)), asin(y * sinz / r)];\n  };\n\n  return forward;\n}\nexport default function () {\n  var beta = halfPi,\n      m = projectionMutator(airyRaw),\n      p = m(beta);\n\n  p.radius = function (_) {\n    return arguments.length ? m(beta = _ * radians) : beta * degrees;\n  };\n\n  return p.scale(179.976).clipAngle(147);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, acos, cos, epsilon, pi, sin, sinci, sqrt } from \"./math.js\";\nexport function aitoffRaw(x, y) {\n  var cosy = cos(y),\n      sincia = sinci(acos(cosy * cos(x /= 2)));\n  return [2 * cosy * sin(x) * sincia, sin(y) * sincia];\n} // Abort if [x, y] is not within an ellipse centered at [0, 0] with\n// semi-major axis pi and semi-minor axis pi/2.\n\naitoffRaw.invert = function (x, y) {\n  if (x * x + 4 * y * y > pi * pi + epsilon) return;\n  var x1 = x,\n      y1 = y,\n      i = 25;\n\n  do {\n    var sinx = sin(x1),\n        sinx_2 = sin(x1 / 2),\n        cosx_2 = cos(x1 / 2),\n        siny = sin(y1),\n        cosy = cos(y1),\n        sin_2y = sin(2 * y1),\n        sin2y = siny * siny,\n        cos2y = cosy * cosy,\n        sin2x_2 = sinx_2 * sinx_2,\n        c = 1 - cos2y * cosx_2 * cosx_2,\n        e = c ? acos(cosy * cosx_2) * sqrt(f = 1 / c) : f = 0,\n        f,\n        fx = 2 * e * cosy * sinx_2 - x,\n        fy = e * siny - y,\n        dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y),\n        dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2),\n        dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx),\n        dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy),\n        z = dxdy * dydx - dydy * dxdx;\n    if (!z) break;\n    var dx = (fy * dxdy - fx * dydy) / z,\n        dy = (fx * dydx - fy * dxdx) / z;\n    x1 -= dx, y1 -= dy;\n  } while ((abs(dx) > epsilon || abs(dy) > epsilon) && --i > 0);\n\n  return [x1, y1];\n};\n\nexport default function () {\n  return projection(aitoffRaw).scale(152.63);\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { abs, atan2, cos, degrees, epsilon, radians, sin, tan } from \"./math.js\";\nexport function armadilloRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      k = (1 + sinPhi0 - cosPhi0) / 2;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        cosLambda = cos(lambda /= 2);\n    return [(1 + cosPhi) * sin(lambda), (sPhi0 * phi > -atan2(cosLambda, tanPhi0) - 1e-3 ? 0 : -sPhi0 * 10) + k + sin(phi) * cosPhi0 - (1 + cosPhi) * sinPhi0 * cosLambda // TODO D3 core should allow null or [NaN, NaN] to be returned.\n    ];\n  }\n\n  forward.invert = function (x, y) {\n    var lambda = 0,\n        phi = 0,\n        i = 50;\n\n    do {\n      var cosLambda = cos(lambda),\n          sinLambda = sin(lambda),\n          cosPhi = cos(phi),\n          sinPhi = sin(phi),\n          A = 1 + cosPhi,\n          fx = A * sinLambda - x,\n          fy = k + sinPhi * cosPhi0 - A * sinPhi0 * cosLambda - y,\n          dxdLambda = A * cosLambda / 2,\n          dxdPhi = -sinLambda * sinPhi,\n          dydLambda = sinPhi0 * A * sinLambda / 2,\n          dydPhi = cosPhi0 * cosPhi + sinPhi0 * cosLambda * sinPhi,\n          denominator = dxdPhi * dydLambda - dydPhi * dxdLambda,\n          dLambda = (fy * dxdPhi - fx * dydPhi) / denominator / 2,\n          dPhi = (fx * dydLambda - fy * dxdLambda) / denominator;\n      if (abs(dPhi) > 2) dPhi /= 2;\n      lambda -= dLambda, phi -= dPhi;\n    } while ((abs(dLambda) > epsilon || abs(dPhi) > epsilon) && --i > 0);\n\n    return sPhi0 * phi > -atan2(cos(lambda), tanPhi0) - 1e-3 ? [lambda * 2, phi] : null;\n  };\n\n  return forward;\n}\nexport default function () {\n  var phi0 = 20 * radians,\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      m = projectionMutator(armadilloRaw),\n      p = m(phi0),\n      stream_ = p.stream;\n\n  p.parallel = function (_) {\n    if (!arguments.length) return phi0 * degrees;\n    tanPhi0 = tan((sPhi0 = (phi0 = _ * radians) >= 0 ? 1 : -1) * phi0);\n    return m(phi0);\n  };\n\n  p.stream = function (stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream)),\n        precision = p.precision();\n    p.rotate(rotate);\n\n    rotateStream.sphere = function () {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n\n      for (var lambda = sPhi0 * -180; sPhi0 * lambda < 180; lambda += sPhi0 * 90) {\n        sphereStream.point(lambda, sPhi0 * 90);\n      }\n\n      if (phi0) while (sPhi0 * (lambda -= 3 * sPhi0 * precision) >= -180) {\n        sphereStream.point(lambda, sPhi0 * -atan2(cos(lambda * radians / 2), tanPhi0) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n\n    return rotateStream;\n  };\n\n  return p.scale(218.695).center([0, 28.0974]);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, arcosh, arsinh, asin, atan2, cos, cosh, sign, sin, sinh, sqrt, tan } from \"./math.js\";\nexport function augustRaw(lambda, phi) {\n  var tanPhi = tan(phi / 2),\n      k = sqrt(1 - tanPhi * tanPhi),\n      c = 1 + k * cos(lambda /= 2),\n      x = sin(lambda) * k / c,\n      y = tanPhi / c,\n      x2 = x * x,\n      y2 = y * y;\n  return [4 / 3 * x * (3 + x2 - 3 * y2), 4 / 3 * y * (3 + 3 * x2 - y2)];\n}\n\naugustRaw.invert = function (x, y) {\n  x *= 3 / 8, y *= 3 / 8;\n  if (!x && abs(y) > 1) return null;\n  var x2 = x * x,\n      y2 = y * y,\n      s = 1 + x2 + y2,\n      sin3Eta = sqrt((s - sqrt(s * s - 4 * y * y)) / 2),\n      eta = asin(sin3Eta) / 3,\n      xi = sin3Eta ? arcosh(abs(y / sin3Eta)) / 3 : arsinh(abs(x)) / 3,\n      cosEta = cos(eta),\n      coshXi = cosh(xi),\n      d = coshXi * coshXi - cosEta * cosEta;\n  return [sign(x) * 2 * atan2(sinh(xi) * cosEta, 0.25 - d), sign(y) * 2 * atan2(coshXi * sin(eta), 0.25 + d)];\n};\n\nexport default function () {\n  return projection(augustRaw).scale(66.1603);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, atan, cos, epsilon2, exp, halfPi, log, quarterPi, sign, sin, sqrt, sqrt2, tan } from \"./math.js\";\nvar sqrt8 = sqrt(8),\n    phi0 = log(1 + sqrt2);\nexport function bakerRaw(lambda, phi) {\n  var phi0 = abs(phi);\n  return phi0 < quarterPi ? [lambda, log(tan(quarterPi + phi / 2))] : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];\n}\n\nbakerRaw.invert = function (x, y) {\n  if ((y0 = abs(y)) < phi0) return [x, 2 * atan(exp(y)) - halfPi];\n  var phi = quarterPi,\n      i = 25,\n      delta,\n      y0;\n\n  do {\n    var cosPhi_2 = cos(phi / 2),\n        tanPhi_2 = tan(phi / 2);\n    phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));\n  } while (abs(delta) > epsilon2 && --i > 0);\n\n  return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];\n};\n\nexport default function () {\n  return projection(bakerRaw).scale(112.314);\n}","import { geoProjectionMutator as projectionMutator, geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw } from \"d3-geo\";\nimport { abs, acos, asin, atan, atan2, cos, degrees, halfPi, pi, radians, round, sin, sqrt, tan } from \"./math.js\";\nexport function berghausRaw(lobes) {\n  var k = 2 * pi / lobes;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi);\n\n    if (abs(lambda) > halfPi) {\n      // back hemisphere\n      var theta = atan2(p[1], p[0]),\n          r = sqrt(p[0] * p[0] + p[1] * p[1]),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          alpha = atan2(sin(theta -= theta0), 2 - cos(theta)); // angle relative to lobe end\n\n      theta = theta0 + asin(pi / r * sin(alpha)) - alpha;\n      p[0] = r * cos(theta);\n      p[1] = r * sin(theta);\n    }\n\n    return p;\n  }\n\n  forward.invert = function (x, y) {\n    var r = sqrt(x * x + y * y);\n\n    if (r > halfPi) {\n      var theta = atan2(y, x),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          s = theta > theta0 ? -1 : 1,\n          A = r * cos(theta0 - theta),\n          cotAlpha = 1 / tan(s * acos((A - pi) / sqrt(pi * (pi - 2 * A) + r * r)));\n      theta = theta0 + 2 * atan((cotAlpha + s * sqrt(cotAlpha * cotAlpha - 3)) / 3);\n      x = r * cos(theta), y = r * sin(theta);\n    }\n\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\nexport default function () {\n  var lobes = 5,\n      m = projectionMutator(berghausRaw),\n      p = m(lobes),\n      projectionStream = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.lobes = function (_) {\n    return arguments.length ? m(lobes = +_) : lobes;\n  };\n\n  p.stream = function (stream) {\n    var rotate = p.rotate(),\n        rotateStream = projectionStream(stream),\n        sphereStream = (p.rotate([0, 0]), projectionStream(stream));\n    p.rotate(rotate);\n\n    rotateStream.sphere = function () {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n\n      for (var i = 0, delta = 360 / lobes, delta0 = 2 * pi / lobes, phi = 90 - 180 / lobes, phi0 = halfPi; i < lobes; ++i, phi -= delta, phi0 -= delta0) {\n        sphereStream.point(atan2(sr * cos(phi0), cr) * degrees, asin(sr * sin(phi0)) * degrees);\n\n        if (phi < -90) {\n          sphereStream.point(-90, -180 - phi - epsilon);\n          sphereStream.point(-90, -180 - phi + epsilon);\n        } else {\n          sphereStream.point(90, phi + epsilon);\n          sphereStream.point(90, phi - epsilon);\n        }\n      }\n\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n\n    return rotateStream;\n  };\n\n  return p.scale(87.8076).center([0, 17.1875]).clipAngle(180 - 1e-3);\n}","import { geoAzimuthalEqualAreaRaw as azimuthalEqualAreaRaw, geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { asin, cos, sin } from \"./math.js\";\nexport function hammerRaw(A, B) {\n  if (arguments.length < 2) B = A;\n  if (B === 1) return azimuthalEqualAreaRaw;\n  if (B === Infinity) return hammerQuarticAuthalicRaw;\n\n  function forward(lambda, phi) {\n    var coordinates = azimuthalEqualAreaRaw(lambda / B, phi);\n    coordinates[0] *= A;\n    return coordinates;\n  }\n\n  forward.invert = function (x, y) {\n    var coordinates = azimuthalEqualAreaRaw.invert(x / A, y);\n    coordinates[0] *= B;\n    return coordinates;\n  };\n\n  return forward;\n}\n\nfunction hammerQuarticAuthalicRaw(lambda, phi) {\n  return [lambda * cos(phi) / cos(phi /= 2), 2 * sin(phi)];\n}\n\nhammerQuarticAuthalicRaw.invert = function (x, y) {\n  var phi = 2 * asin(y / 2);\n  return [x * cos(phi / 2) / cos(phi), phi];\n};\n\nexport default function () {\n  var B = 2,\n      m = projectionMutator(hammerRaw),\n      p = m(B);\n\n  p.coefficient = function (_) {\n    if (!arguments.length) return B;\n    return m(B = +_);\n  };\n\n  return p.scale(169.529);\n}","import { abs, epsilon, epsilon2 } from \"./math.js\"; // Approximate Newton-Raphson\n// Solve f(x) = y, start from x\n\nexport function solve(f, y, x) {\n  var steps = 100,\n      delta,\n      f0,\n      f1;\n  x = x === undefined ? 0 : +x;\n  y = +y;\n\n  do {\n    f0 = f(x);\n    f1 = f(x + epsilon);\n    if (f0 === f1) f1 = f0 + epsilon;\n    x -= delta = -1 * epsilon * (f0 - y) / (f0 - f1);\n  } while (steps-- > 0 && abs(delta) > epsilon);\n\n  return steps < 0 ? NaN : x;\n} // Approximate Newton-Raphson in 2D\n// Solve f(a,b) = [x,y]\n\nexport function solve2d(f, MAX_ITERATIONS, eps) {\n  if (MAX_ITERATIONS === undefined) MAX_ITERATIONS = 40;\n  if (eps === undefined) eps = epsilon2;\n  return function (x, y, a, b) {\n    var err2, da, db;\n    a = a === undefined ? 0 : +a;\n    b = b === undefined ? 0 : +b;\n\n    for (var i = 0; i < MAX_ITERATIONS; i++) {\n      var p = f(a, b),\n          // diffs\n      tx = p[0] - x,\n          ty = p[1] - y;\n      if (abs(tx) < eps && abs(ty) < eps) break; // we're there!\n      // backtrack if we overshot\n\n      var h = tx * tx + ty * ty;\n\n      if (h > err2) {\n        a -= da /= 2;\n        b -= db /= 2;\n        continue;\n      }\n\n      err2 = h; // partial derivatives\n\n      var ea = (a > 0 ? -1 : 1) * eps,\n          eb = (b > 0 ? -1 : 1) * eps,\n          pa = f(a + ea, b),\n          pb = f(a, b + eb),\n          dxa = (pa[0] - p[0]) / ea,\n          dya = (pa[1] - p[1]) / ea,\n          dxb = (pb[0] - p[0]) / eb,\n          dyb = (pb[1] - p[1]) / eb,\n          // determinant\n      D = dyb * dxa - dya * dxb,\n          // newton step — or half-step for small D\n      l = (abs(D) < 0.5 ? 0.5 : 1) / D;\n      da = (ty * dxb - tx * dyb) * l;\n      db = (tx * dya - ty * dxa) * l;\n      a += da;\n      b += db;\n      if (abs(da) < eps && abs(db) < eps) break; // we're crawling\n    }\n\n    return [a, b];\n  };\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { hammerRaw } from \"./hammer.js\";\nimport { cos, pi, sin } from \"./math.js\";\nimport { solve2d } from \"./newton.js\"; // Bertin 1953 as a modified Briesemeister\n// https://bl.ocks.org/Fil/5b9ee9636dfb6ffa53443c9006beb642\n\nexport function bertin1953Raw() {\n  var hammer = hammerRaw(1.68, 2),\n      fu = 1.4,\n      k = 12;\n\n  function forward(lambda, phi) {\n    if (lambda + phi < -fu) {\n      var u = (lambda - phi + 1.6) * (lambda + phi + fu) / 8;\n      lambda += u;\n      phi -= 0.8 * u * sin(phi + pi / 2);\n    }\n\n    var r = hammer(lambda, phi);\n    var d = (1 - cos(lambda * phi)) / k;\n\n    if (r[1] < 0) {\n      r[0] *= 1 + d;\n    }\n\n    if (r[1] > 0) {\n      r[1] *= 1 + d / 1.5 * r[0] * r[0];\n    }\n\n    return r;\n  }\n\n  forward.invert = solve2d(forward);\n  return forward;\n}\nexport default function () {\n  // this projection should not be rotated\n  return projection(bertin1953Raw()).rotate([-16.5, -42]).scale(176.57).center([7.93, 0.09]);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, halfPi, pi, sin, sqrt2 } from \"./math.js\";\nexport function mollweideBromleyTheta(cp, phi) {\n  var cpsinPhi = cp * sin(phi),\n      i = 30,\n      delta;\n\n  do {\n    phi -= delta = (phi + sin(phi) - cpsinPhi) / (1 + cos(phi));\n  } while (abs(delta) > epsilon && --i > 0);\n\n  return phi / 2;\n}\nexport function mollweideBromleyRaw(cx, cy, cp) {\n  function forward(lambda, phi) {\n    return [cx * lambda * cos(phi = mollweideBromleyTheta(cp, phi)), cy * sin(phi)];\n  }\n\n  forward.invert = function (x, y) {\n    return y = asin(y / cy), [x / (cx * cos(y)), asin((2 * y + sin(2 * y)) / cp)];\n  };\n\n  return forward;\n}\nexport var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);\nexport default function () {\n  return projection(mollweideRaw).scale(169.529);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { mollweideBromleyTheta } from \"./mollweide.js\";\nimport { abs, cos, epsilon, pi, quarterPi, sin, sqrt2 } from \"./math.js\";\nvar k = 2.00276,\n    w = 1.11072;\nexport function boggsRaw(lambda, phi) {\n  var theta = mollweideBromleyTheta(pi, phi);\n  return [k * lambda / (1 / cos(phi) + w / cos(theta)), (phi + sqrt2 * sin(theta)) / k];\n}\n\nboggsRaw.invert = function (x, y) {\n  var ky = k * y,\n      theta = y < 0 ? -quarterPi : quarterPi,\n      i = 25,\n      delta,\n      phi;\n\n  do {\n    phi = ky - sqrt2 * sin(theta);\n    theta -= delta = (sin(2 * theta) + 2 * theta - pi * sin(phi)) / (2 * cos(2 * theta) + 2 + pi * cos(phi) * sqrt2 * cos(theta));\n  } while (abs(delta) > epsilon && --i > 0);\n\n  phi = ky - sqrt2 * sin(theta);\n  return [x * (1 / cos(phi) + w / cos(theta)) / k, phi];\n};\n\nexport default function () {\n  return projection(boggsRaw).scale(160.857);\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { degrees, radians } from \"./math.js\";\nexport default function (projectAt) {\n  var phi0 = 0,\n      m = projectionMutator(projectAt),\n      p = m(phi0);\n\n  p.parallel = function (_) {\n    return arguments.length ? m(phi0 = _ * radians) : phi0 * degrees;\n  };\n\n  return p;\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { cos } from \"./math.js\";\nexport function sinusoidalRaw(lambda, phi) {\n  return [lambda * cos(phi), phi];\n}\n\nsinusoidalRaw.invert = function (x, y) {\n  return [x / cos(y), y];\n};\n\nexport default function () {\n  return projection(sinusoidalRaw).scale(152.63);\n}","import parallel1 from \"./parallel1.js\";\nimport { atan2, cos, sin, sqrt, tan } from \"./math.js\";\nimport { sinusoidalRaw } from \"./sinusoidal.js\";\nexport function bonneRaw(phi0) {\n  if (!phi0) return sinusoidalRaw;\n  var cotPhi0 = 1 / tan(phi0);\n\n  function forward(lambda, phi) {\n    var rho = cotPhi0 + phi0 - phi,\n        e = rho ? lambda * cos(phi) / rho : rho;\n    return [rho * sin(e), cotPhi0 - rho * cos(e)];\n  }\n\n  forward.invert = function (x, y) {\n    var rho = sqrt(x * x + (y = cotPhi0 - y) * y),\n        phi = cotPhi0 + phi0 - rho;\n    return [rho / cos(phi) * atan2(x, y), phi];\n  };\n\n  return forward;\n}\nexport default function () {\n  return parallel1(bonneRaw).scale(123.082).center([0, 26.1441]).parallel(45);\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { atan2, cos, halfPi, sin, sqrt } from \"./math.js\";\nexport function bottomleyRaw(sinPsi) {\n  function forward(lambda, phi) {\n    var rho = halfPi - phi,\n        eta = rho ? lambda * sinPsi * sin(rho) / rho : rho;\n    return [rho * sin(eta) / sinPsi, halfPi - rho * cos(eta)];\n  }\n\n  forward.invert = function (x, y) {\n    var x1 = x * sinPsi,\n        y1 = halfPi - y,\n        rho = sqrt(x1 * x1 + y1 * y1),\n        eta = atan2(x1, y1);\n    return [(rho ? rho / sin(rho) : 1) * eta / sinPsi, halfPi - rho];\n  };\n\n  return forward;\n}\nexport default function () {\n  var sinPsi = 0.5,\n      m = projectionMutator(bottomleyRaw),\n      p = m(sinPsi);\n\n  p.fraction = function (_) {\n    return arguments.length ? m(sinPsi = +_) : sinPsi;\n  };\n\n  return p.scale(158.837);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { pi } from \"./math.js\";\nimport { mollweideBromleyRaw } from \"./mollweide.js\";\nexport var bromleyRaw = mollweideBromleyRaw(1, 4 / pi, pi);\nexport default function () {\n  return projection(bromleyRaw).scale(152.63);\n}","import { geoCentroid as centroid, geoProjection as projection, geoRotation as rotation } from \"d3-geo\";\nimport { abs, acos, asin, atan2, cos, epsilon, floor, pi, radians, sin, sqrt } from \"./math.js\";\nimport { solve2d } from \"./newton.js\"; // Azimuthal distance.\n\nfunction distance(dPhi, c1, s1, c2, s2, dLambda) {\n  var cosdLambda = cos(dLambda),\n      r;\n\n  if (abs(dPhi) > 1 || abs(dLambda) > 1) {\n    r = acos(s1 * s2 + c1 * c2 * cosdLambda);\n  } else {\n    var sindPhi = sin(dPhi / 2),\n        sindLambda = sin(dLambda / 2);\n    r = 2 * asin(sqrt(sindPhi * sindPhi + c1 * c2 * sindLambda * sindLambda));\n  }\n\n  return abs(r) > epsilon ? [r, atan2(c2 * sin(dLambda), c1 * s2 - s1 * c2 * cosdLambda)] : [0, 0];\n} // Angle opposite a, and contained between sides of lengths b and c.\n\n\nfunction angle(b, c, a) {\n  return acos((b * b + c * c - a * a) / (2 * b * c));\n} // Normalize longitude.\n\n\nfunction longitude(lambda) {\n  return lambda - 2 * pi * floor((lambda + pi) / (2 * pi));\n}\n\nexport function chamberlinRaw(p0, p1, p2) {\n  var points = [[p0[0], p0[1], sin(p0[1]), cos(p0[1])], [p1[0], p1[1], sin(p1[1]), cos(p1[1])], [p2[0], p2[1], sin(p2[1]), cos(p2[1])]];\n\n  for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {\n    b = points[i];\n    a.v = distance(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);\n    a.point = [0, 0];\n  }\n\n  var beta0 = angle(points[0].v[0], points[2].v[0], points[1].v[0]),\n      beta1 = angle(points[0].v[0], points[1].v[0], points[2].v[0]),\n      beta2 = pi - beta0;\n  points[2].point[1] = 0;\n  points[0].point[0] = -(points[1].point[0] = points[0].v[0] / 2);\n  var mean = [points[2].point[0] = points[0].point[0] + points[2].v[0] * cos(beta0), 2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * sin(beta0))];\n\n  function forward(lambda, phi) {\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        v = new Array(3),\n        i; // Compute distance and azimuth from control points.\n\n    for (i = 0; i < 3; ++i) {\n      var p = points[i];\n      v[i] = distance(phi - p[1], p[3], p[2], cosPhi, sinPhi, lambda - p[0]);\n      if (!v[i][0]) return p.point;\n      v[i][1] = longitude(v[i][1] - p.v[1]);\n    } // Arithmetic mean of interception points.\n\n\n    var point = mean.slice();\n\n    for (i = 0; i < 3; ++i) {\n      var j = i == 2 ? 0 : i + 1;\n      var a = angle(points[i].v[0], v[i][0], v[j][0]);\n      if (v[i][1] < 0) a = -a;\n\n      if (!i) {\n        point[0] += v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else if (i == 1) {\n        a = beta1 - a;\n        point[0] -= v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else {\n        a = beta2 - a;\n        point[0] += v[i][0] * cos(a);\n        point[1] += v[i][0] * sin(a);\n      }\n    }\n\n    point[0] /= 3, point[1] /= 3;\n    return point;\n  }\n\n  return forward;\n}\n\nfunction pointRadians(p) {\n  return p[0] *= radians, p[1] *= radians, p;\n}\n\nexport function chamberlinAfrica() {\n  return chamberlin([0, 22], [45, 22], [22.5, -22]).scale(380).center([22.5, 2]);\n}\nexport default function chamberlin(p0, p1, p2) {\n  // TODO order matters!\n  var c = centroid({\n    type: \"MultiPoint\",\n    coordinates: [p0, p1, p2]\n  }),\n      R = [-c[0], -c[1]],\n      r = rotation(R),\n      f = chamberlinRaw(pointRadians(r(p0)), pointRadians(r(p1)), pointRadians(r(p2)));\n  f.invert = solve2d(f);\n  var p = projection(f).rotate(R),\n      center = p.center;\n  delete p.rotate;\n\n  p.center = function (_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p.clipAngle(90);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { asin, pi, sin, sqrt, sqrtPi } from \"./math.js\";\nexport function collignonRaw(lambda, phi) {\n  var alpha = sqrt(1 - sin(phi));\n  return [2 / sqrtPi * lambda * alpha, sqrtPi * (1 - alpha)];\n}\n\ncollignonRaw.invert = function (x, y) {\n  var lambda = (lambda = y / sqrtPi - 1) * lambda;\n  return [lambda > 0 ? x * sqrt(pi / lambda) / 2 : 0, asin(1 - lambda)];\n};\n\nexport default function () {\n  return projection(collignonRaw).scale(95.6464).center([0, 30]);\n}","import { asin, atan2, cos, sin, sqrt, tan } from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\nexport function craigRaw(phi0) {\n  var tanPhi0 = tan(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda, (lambda ? lambda / sin(lambda) : 1) * (sin(phi) * cos(lambda) - tanPhi0 * cos(phi))];\n  }\n\n  forward.invert = tanPhi0 ? function (x, y) {\n    if (x) y *= sin(x) / x;\n    var cosLambda = cos(x);\n    return [x, 2 * atan2(sqrt(cosLambda * cosLambda + tanPhi0 * tanPhi0 - y * y) - cosLambda, tanPhi0 - y)];\n  } : function (x, y) {\n    return [x, asin(x ? y * tan(x) / x : y)];\n  };\n  return forward;\n}\nexport default function () {\n  return parallel1(craigRaw).scale(249.828).clipAngle(90);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { asin, cos, sin, sqrt, sqrtPi } from \"./math.js\";\nvar sqrt3 = sqrt(3);\nexport function crasterRaw(lambda, phi) {\n  return [sqrt3 * lambda * (2 * cos(2 * phi / 3) - 1) / sqrtPi, sqrt3 * sqrtPi * sin(phi / 3)];\n}\n\ncrasterRaw.invert = function (x, y) {\n  var phi = 3 * asin(y / (sqrt3 * sqrtPi));\n  return [sqrtPi * x / (sqrt3 * (2 * cos(2 * phi / 3) - 1)), phi];\n};\n\nexport default function () {\n  return projection(crasterRaw).scale(156.19);\n}","import { asin, cos, sin } from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function (x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\nexport default function () {\n  return parallel1(cylindricalEqualAreaRaw).parallel(38.58) // acos(sqrt(width / height / pi)) * radians\n  .scale(195.044); // width / (sqrt(width / height / pi) * 2 * pi)\n}","import { atan, cos, tan } from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\nexport function cylindricalStereographicRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, (1 + cosPhi0) * tan(phi / 2)];\n  }\n\n  forward.invert = function (x, y) {\n    return [x / cosPhi0, atan(y / (1 + cosPhi0)) * 2];\n  };\n\n  return forward;\n}\nexport default function () {\n  return parallel1(cylindricalStereographicRaw).scale(124.75);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, pi, sqrt } from \"./math.js\";\nexport function eckert1Raw(lambda, phi) {\n  var alpha = sqrt(8 / (3 * pi));\n  return [alpha * lambda * (1 - abs(phi) / pi), alpha * phi];\n}\n\neckert1Raw.invert = function (x, y) {\n  var alpha = sqrt(8 / (3 * pi)),\n      phi = y / alpha;\n  return [x / (alpha * (1 - abs(phi) / pi)), phi];\n};\n\nexport default function () {\n  return projection(eckert1Raw).scale(165.664);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, pi, sign, sin, sqrt } from \"./math.js\";\nexport function eckert2Raw(lambda, phi) {\n  var alpha = sqrt(4 - 3 * sin(abs(phi)));\n  return [2 / sqrt(6 * pi) * lambda * alpha, sign(phi) * sqrt(2 * pi / 3) * (2 - alpha)];\n}\n\neckert2Raw.invert = function (x, y) {\n  var alpha = 2 - abs(y) / sqrt(2 * pi / 3);\n  return [x * sqrt(6 * pi) / (2 * alpha), sign(y) * asin((4 - alpha * alpha) / 3)];\n};\n\nexport default function () {\n  return projection(eckert2Raw).scale(165.664);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { pi, sqrt } from \"./math.js\";\nexport function eckert3Raw(lambda, phi) {\n  var k = sqrt(pi * (4 + pi));\n  return [2 / k * lambda * (1 + sqrt(1 - 4 * phi * phi / (pi * pi))), 4 / k * phi];\n}\n\neckert3Raw.invert = function (x, y) {\n  var k = sqrt(pi * (4 + pi)) / 2;\n  return [x * k / (1 + sqrt(1 - y * y * (4 + pi) / (4 * pi))), y * k / 2];\n};\n\nexport default function () {\n  return projection(eckert3Raw).scale(180.739);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, halfPi, pi, sin, sqrt } from \"./math.js\";\nexport function eckert4Raw(lambda, phi) {\n  var k = (2 + halfPi) * sin(phi);\n  phi /= 2;\n\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    var cosPhi = cos(phi);\n    phi -= delta = (phi + sin(phi) * (cosPhi + 2) - k) / (2 * cosPhi * (1 + cosPhi));\n  }\n\n  return [2 / sqrt(pi * (4 + pi)) * lambda * (1 + cos(phi)), 2 * sqrt(pi / (4 + pi)) * sin(phi)];\n}\n\neckert4Raw.invert = function (x, y) {\n  var A = y * sqrt((4 + pi) / pi) / 2,\n      k = asin(A),\n      c = cos(k);\n  return [x / (2 / sqrt(pi * (4 + pi)) * (1 + c)), asin((k + A * (c + 2)) / (2 + halfPi))];\n};\n\nexport default function () {\n  return projection(eckert4Raw).scale(180.739);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { cos, pi, sqrt } from \"./math.js\";\nexport function eckert5Raw(lambda, phi) {\n  return [lambda * (1 + cos(phi)) / sqrt(2 + pi), 2 * phi / sqrt(2 + pi)];\n}\n\neckert5Raw.invert = function (x, y) {\n  var k = sqrt(2 + pi),\n      phi = y * k / 2;\n  return [k * x / (1 + cos(phi)), phi];\n};\n\nexport default function () {\n  return projection(eckert5Raw).scale(173.044);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, halfPi, pi, sin, sqrt } from \"./math.js\";\nexport function eckert6Raw(lambda, phi) {\n  var k = (1 + halfPi) * sin(phi);\n\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    phi -= delta = (phi + sin(phi) - k) / (1 + cos(phi));\n  }\n\n  k = sqrt(2 + pi);\n  return [lambda * (1 + cos(phi)) / k, 2 * phi / k];\n}\n\neckert6Raw.invert = function (x, y) {\n  var j = 1 + halfPi,\n      k = sqrt(j / 2);\n  return [x * 2 * k / (1 + cos(y *= k)), asin((y + sin(y)) / j)];\n};\n\nexport default function () {\n  return projection(eckert6Raw).scale(173.044);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { augustRaw } from \"./august.js\";\nimport { abs, atan, cos, epsilon, halfPi, log, max, min, sin, sqrt, sqrt1_2, sqrt2 } from \"./math.js\";\nvar eisenlohrK = 3 + 2 * sqrt2;\nexport function eisenlohrRaw(lambda, phi) {\n  var s0 = sin(lambda /= 2),\n      c0 = cos(lambda),\n      k = sqrt(cos(phi)),\n      c1 = cos(phi /= 2),\n      t = sin(phi) / (c1 + sqrt2 * c0 * k),\n      c = sqrt(2 / (1 + t * t)),\n      v = sqrt((sqrt2 * c1 + (c0 + s0) * k) / (sqrt2 * c1 + (c0 - s0) * k));\n  return [eisenlohrK * (c * (v - 1 / v) - 2 * log(v)), eisenlohrK * (c * t * (v + 1 / v) - 2 * atan(t))];\n}\n\neisenlohrRaw.invert = function (x, y) {\n  if (!(p = augustRaw.invert(x / 1.2, y * 1.065))) return null;\n  var lambda = p[0],\n      phi = p[1],\n      i = 20,\n      p;\n  x /= eisenlohrK, y /= eisenlohrK;\n\n  do {\n    var _0 = lambda / 2,\n        _1 = phi / 2,\n        s0 = sin(_0),\n        c0 = cos(_0),\n        s1 = sin(_1),\n        c1 = cos(_1),\n        cos1 = cos(phi),\n        k = sqrt(cos1),\n        t = s1 / (c1 + sqrt2 * c0 * k),\n        t2 = t * t,\n        c = sqrt(2 / (1 + t2)),\n        v0 = sqrt2 * c1 + (c0 + s0) * k,\n        v1 = sqrt2 * c1 + (c0 - s0) * k,\n        v2 = v0 / v1,\n        v = sqrt(v2),\n        vm1v = v - 1 / v,\n        vp1v = v + 1 / v,\n        fx = c * vm1v - 2 * log(v) - x,\n        fy = c * t * vp1v - 2 * atan(t) - y,\n        deltatDeltaLambda = s1 && sqrt1_2 * k * s0 * t2 / s1,\n        deltatDeltaPhi = (sqrt2 * c0 * c1 + k) / (2 * (c1 + sqrt2 * c0 * k) * (c1 + sqrt2 * c0 * k) * k),\n        deltacDeltat = -0.5 * t * c * c * c,\n        deltacDeltaLambda = deltacDeltat * deltatDeltaLambda,\n        deltacDeltaPhi = deltacDeltat * deltatDeltaPhi,\n        A = (A = 2 * c1 + sqrt2 * k * (c0 - s0)) * A * v,\n        deltavDeltaLambda = (sqrt2 * c0 * c1 * k + cos1) / A,\n        deltavDeltaPhi = -(sqrt2 * s0 * s1) / (k * A),\n        deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2),\n        deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2),\n        deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2),\n        deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n\n    if (!denominator) break;\n    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda;\n    phi = max(-halfPi, min(halfPi, phi - deltaPhi));\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n\n  return abs(abs(phi) - halfPi) < epsilon ? [0, phi] : i && [lambda, phi];\n};\n\nexport default function () {\n  return projection(eisenlohrRaw).scale(62.5271);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { atan, cos, radians, sqrt, tan } from \"./math.js\";\nvar faheyK = cos(35 * radians);\nexport function faheyRaw(lambda, phi) {\n  var t = tan(phi / 2);\n  return [lambda * faheyK * sqrt(1 - t * t), (1 + faheyK) * t];\n}\n\nfaheyRaw.invert = function (x, y) {\n  var t = y / (1 + faheyK);\n  return [x && x / (faheyK * sqrt(1 - t * t)), 2 * atan(t)];\n};\n\nexport default function () {\n  return projection(faheyRaw).scale(137.152);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { atan, cos, sqrtPi, tan } from \"./math.js\";\nexport function foucautRaw(lambda, phi) {\n  var k = phi / 2,\n      cosk = cos(k);\n  return [2 * lambda / sqrtPi * cos(phi) * cosk * cosk, sqrtPi * tan(k)];\n}\n\nfoucautRaw.invert = function (x, y) {\n  var k = atan(y / sqrtPi),\n      cosk = cos(k),\n      phi = 2 * k;\n  return [x * sqrtPi / 2 / (cos(phi) * cosk * cosk), phi];\n};\n\nexport default function () {\n  return projection(foucautRaw).scale(135.264);\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { cos, halfPi, pi, sin, sqrt } from \"./math.js\";\nimport { solve } from \"./newton.js\";\nexport function foucautSinusoidalRaw(alpha) {\n  var beta = 1 - alpha,\n      equatorial = raw(pi, 0)[0] - raw(-pi, 0)[0],\n      polar = raw(0, halfPi)[1] - raw(0, -halfPi)[1],\n      ratio = sqrt(2 * polar / equatorial);\n\n  function raw(lambda, phi) {\n    var cosphi = cos(phi),\n        sinphi = sin(phi);\n    return [cosphi / (beta + alpha * cosphi) * lambda, beta * phi + alpha * sinphi];\n  }\n\n  function forward(lambda, phi) {\n    var p = raw(lambda, phi);\n    return [p[0] * ratio, p[1] / ratio];\n  }\n\n  function forwardMeridian(phi) {\n    return forward(0, phi)[1];\n  }\n\n  forward.invert = function (x, y) {\n    var phi = solve(forwardMeridian, y),\n        lambda = x / ratio * (alpha + beta / cos(phi));\n    return [lambda, phi];\n  };\n\n  return forward;\n}\nexport default function () {\n  var alpha = 0.5,\n      m = projectionMutator(foucautSinusoidalRaw),\n      p = m(alpha);\n\n  p.alpha = function (_) {\n    return arguments.length ? m(alpha = +_) : alpha;\n  };\n\n  return p.scale(168.725);\n}","import { geoEquirectangular, geoOrthographic } from \"d3-geo\";\nimport { asin, atan, degrees, radians, sin, tan } from \"./math.js\";\n\nfunction gilbertForward(point) {\n  return [point[0] / 2, asin(tan(point[1] / 2 * radians)) * degrees];\n}\n\nfunction gilbertInvert(point) {\n  return [point[0] * 2, 2 * atan(sin(point[1] * radians)) * degrees];\n}\n\nexport default function (projectionType) {\n  if (projectionType == null) projectionType = geoOrthographic;\n  var projection = projectionType(),\n      equirectangular = geoEquirectangular().scale(degrees).precision(0).clipAngle(null).translate([0, 0]); // antimeridian cutting\n\n  function gilbert(point) {\n    return projection(gilbertForward(point));\n  }\n\n  if (projection.invert) gilbert.invert = function (point) {\n    return gilbertInvert(projection.invert(point));\n  };\n\n  gilbert.stream = function (stream) {\n    var s1 = projection.stream(stream),\n        s0 = equirectangular.stream({\n      point: function point(lambda, phi) {\n        s1.point(lambda / 2, asin(tan(-phi / 2 * radians)) * degrees);\n      },\n      lineStart: function lineStart() {\n        s1.lineStart();\n      },\n      lineEnd: function lineEnd() {\n        s1.lineEnd();\n      },\n      polygonStart: function polygonStart() {\n        s1.polygonStart();\n      },\n      polygonEnd: function polygonEnd() {\n        s1.polygonEnd();\n      }\n    });\n    s0.sphere = s1.sphere;\n    return s0;\n  };\n\n  function property(name) {\n    gilbert[name] = function () {\n      return arguments.length ? (projection[name].apply(projection, arguments), gilbert) : projection[name]();\n    };\n  }\n\n  gilbert.rotate = function (_) {\n    return arguments.length ? (equirectangular.rotate(_), gilbert) : equirectangular.rotate();\n  };\n\n  gilbert.center = function (_) {\n    return arguments.length ? (projection.center(gilbertForward(_)), gilbert) : gilbertInvert(projection.center());\n  };\n\n  property(\"angle\");\n  property(\"clipAngle\");\n  property(\"clipExtent\");\n  property(\"fitExtent\");\n  property(\"fitHeight\");\n  property(\"fitSize\");\n  property(\"fitWidth\");\n  property(\"scale\");\n  property(\"translate\");\n  property(\"precision\");\n  return gilbert.scale(249.5);\n}","import { geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw, geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { abs, asin, atan2, cos, degrees, epsilon, epsilon2, halfPi, pi, radians, round, sin, sqrt } from \"./math.js\";\nexport function gingeryRaw(rho, n) {\n  var k = 2 * pi / n,\n      rho2 = rho * rho;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi),\n        x = p[0],\n        y = p[1],\n        r2 = x * x + y * y;\n\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          alpha = theta - theta0,\n          rhoCosAlpha = rho * cos(alpha),\n          k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha),\n          s_ = gingeryLength(alpha, k_),\n          e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      x = r;\n      var i = 50,\n          delta;\n\n      do {\n        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);\n      } while (abs(delta) > epsilon && --i > 0);\n\n      y = alpha * sin(x);\n      if (x < halfPi) y -= k_ * (x - halfPi);\n      var s = sin(theta0),\n          c = cos(theta0);\n      p[0] = x * c - y * s;\n      p[1] = x * s + y * c;\n    }\n\n    return p;\n  }\n\n  forward.invert = function (x, y) {\n    var r2 = x * x + y * y;\n\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          dTheta = theta - theta0;\n      x = r * cos(dTheta);\n      y = r * sin(dTheta);\n      var x_halfPi = x - halfPi,\n          sinx = sin(x),\n          alpha = y / sinx,\n          delta = x < halfPi ? Infinity : 0,\n          i = 10;\n\n      while (true) {\n        var rhosinAlpha = rho * sin(alpha),\n            rhoCosAlpha = rho * cos(alpha),\n            sinRhoCosAlpha = sin(rhoCosAlpha),\n            halfPi_RhoCosAlpha = halfPi - rhoCosAlpha,\n            k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,\n            s_ = gingeryLength(alpha, k_);\n        if (abs(delta) < epsilon2 || ! --i) break;\n        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (sinx - x_halfPi * 2 * (halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) - rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));\n      }\n\n      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      theta = theta0 + alpha;\n      x = r * cos(theta);\n      y = r * sin(theta);\n    }\n\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction gingeryLength(alpha, k) {\n  return function (x) {\n    var y_ = alpha * cos(x);\n    if (x < halfPi) y_ -= k;\n    return sqrt(1 + y_ * y_);\n  };\n} // Numerical integration: trapezoidal rule.\n\n\nfunction gingeryIntegrate(f, a, b) {\n  var n = 50,\n      h = (b - a) / n,\n      s = f(a) + f(b);\n\n  for (var i = 1, x = a; i < n; ++i) {\n    s += 2 * f(x += h);\n  }\n\n  return s * 0.5 * h;\n}\n\nexport default function () {\n  var n = 6,\n      rho = 30 * radians,\n      cRho = cos(rho),\n      sRho = sin(rho),\n      m = projectionMutator(gingeryRaw),\n      p = m(rho, n),\n      stream_ = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.radius = function (_) {\n    if (!arguments.length) return rho * degrees;\n    cRho = cos(rho = _ * radians);\n    sRho = sin(rho);\n    return m(rho, n);\n  };\n\n  p.lobes = function (_) {\n    if (!arguments.length) return n;\n    return m(rho, n = +_);\n  };\n\n  p.stream = function (stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n\n    rotateStream.sphere = function () {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n\n      for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; ++i, phi -= delta) {\n        sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);\n        sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);\n      }\n\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n\n    return rotateStream;\n  };\n\n  return p.rotate([90, -40]).scale(91.7095).clipAngle(180 - 1e-3);\n}","import { abs, asin, cos, epsilon, pi, sin, sqrt } from \"./math.js\";\nexport default function (a, b, c, d, e, f, g, h) {\n  if (arguments.length < 8) h = 0;\n\n  function forward(lambda, phi) {\n    if (!phi) return [a * lambda / pi, 0];\n    var phi2 = phi * phi,\n        xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n        yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n        m = (xB * xB + yB * yB) / (2 * yB),\n        alpha = lambda * asin(xB / m) / pi;\n    return [m * sin(alpha), phi * (1 + phi2 * h) + m * (1 - cos(alpha))];\n  }\n\n  forward.invert = function (x, y) {\n    var lambda = pi * x / a,\n        phi = y,\n        deltaLambda,\n        deltaPhi,\n        i = 50;\n\n    do {\n      var phi2 = phi * phi,\n          xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n          yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n          p = xB * xB + yB * yB,\n          q = 2 * yB,\n          m = p / q,\n          m2 = m * m,\n          dAlphadLambda = asin(xB / m) / pi,\n          alpha = lambda * dAlphadLambda,\n          xB2 = xB * xB,\n          dxBdPhi = (2 * b + phi2 * (4 * c + phi2 * 6 * d)) * phi,\n          dyBdPhi = e + phi2 * (3 * f + phi2 * 5 * g),\n          dpdPhi = 2 * (xB * dxBdPhi + yB * (dyBdPhi - 1)),\n          dqdPhi = 2 * (dyBdPhi - 1),\n          dmdPhi = (dpdPhi * q - p * dqdPhi) / (q * q),\n          cosAlpha = cos(alpha),\n          sinAlpha = sin(alpha),\n          mcosAlpha = m * cosAlpha,\n          msinAlpha = m * sinAlpha,\n          dAlphadPhi = lambda / pi * (1 / sqrt(1 - xB2 / m2)) * (dxBdPhi * m - xB * dmdPhi) / m2,\n          fx = msinAlpha - x,\n          fy = phi * (1 + phi2 * h) + m - mcosAlpha - y,\n          deltaxDeltaPhi = dmdPhi * sinAlpha + mcosAlpha * dAlphadPhi,\n          deltaxDeltaLambda = mcosAlpha * dAlphadLambda,\n          deltayDeltaPhi = 1 + dmdPhi - (dmdPhi * cosAlpha - msinAlpha * dAlphadPhi),\n          deltayDeltaLambda = msinAlpha * dAlphadLambda,\n          denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n      if (!denominator) break;\n      lambda -= deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator;\n      phi -= deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n\n    return [lambda, phi];\n  };\n\n  return forward;\n}","import { geoProjection as projection } from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\nexport var ginzburg4Raw = ginzburgPolyconicRaw(2.8284, -1.6988, 0.75432, -0.18071, 1.76003, -0.38914, 0.042555);\nexport default function () {\n  return projection(ginzburg4Raw).scale(149.995);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\nexport var ginzburg5Raw = ginzburgPolyconicRaw(2.583819, -0.835827, 0.170354, -0.038094, 1.543313, -0.411435, 0.082742);\nexport default function () {\n  return projection(ginzburg5Raw).scale(153.93);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\nimport { pi } from \"./math.js\";\nexport var ginzburg6Raw = ginzburgPolyconicRaw(5 / 6 * pi, -0.62636, -0.0344, 0, 1.3493, -0.05524, 0, 0.045);\nexport default function () {\n  return projection(ginzburg6Raw).scale(130.945);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, epsilon } from \"./math.js\";\nexport function ginzburg8Raw(lambda, phi) {\n  var lambda2 = lambda * lambda,\n      phi2 = phi * phi;\n  return [lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2), phi * (1 + phi2 / 12)];\n}\n\nginzburg8Raw.invert = function (x, y) {\n  var lambda = x,\n      phi = y,\n      i = 50,\n      delta;\n\n  do {\n    var phi2 = phi * phi;\n    phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);\n  } while (abs(delta) > epsilon && --i > 0);\n\n  i = 50;\n  x /= 1 - 0.162388 * phi2;\n\n  do {\n    var lambda4 = (lambda4 = lambda * lambda) * lambda4;\n    lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);\n  } while (abs(delta) > epsilon && --i > 0);\n\n  return [lambda, phi];\n};\n\nexport default function () {\n  return projection(ginzburg8Raw).scale(131.747);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\nexport var ginzburg9Raw = ginzburgPolyconicRaw(2.6516, -0.76534, 0.19123, -0.047094, 1.36289, -0.13965, 0.031762);\nexport default function () {\n  return projection(ginzburg9Raw).scale(131.087);\n}","import { halfPi, pi } from \"./math.js\";\nexport default function (project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectSquare(lambda, phi) {\n    var s = lambda > 0 ? -0.5 : 0.5,\n        point = project(lambda + s * pi, phi);\n    point[0] -= s * dx;\n    return point;\n  }\n\n  if (project.invert) projectSquare.invert = function (x, y) {\n    var s = x > 0 ? -0.5 : 0.5,\n        location = project.invert(x + s * dx, y),\n        lambda = location[0] - s * pi;\n    if (lambda < -pi) lambda += 2 * pi;else if (lambda > pi) lambda -= 2 * pi;\n    location[0] = lambda;\n    return location;\n  };\n  return projectSquare;\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, atan2, cos, sign, epsilon, epsilon2, halfPi, pi, sin, sqrt } from \"./math.js\";\nimport squareRaw from \"./square.js\";\nexport function gringortenRaw(lambda, phi) {\n  var sLambda = sign(lambda),\n      sPhi = sign(phi),\n      cosPhi = cos(phi),\n      x = cos(lambda) * cosPhi,\n      y = sin(lambda) * cosPhi,\n      z = sin(sPhi * phi);\n  lambda = abs(atan2(y, z));\n  phi = asin(x);\n  if (abs(lambda - halfPi) > epsilon) lambda %= halfPi;\n  var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);\n  if (lambda > pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;\n  return point[0] *= sLambda, point[1] *= -sPhi, point;\n}\n\ngringortenRaw.invert = function (x, y) {\n  if (abs(x) > 1) x = sign(x) * 2 - x;\n  if (abs(y) > 1) y = sign(y) * 2 - y;\n  var sx = sign(x),\n      sy = sign(y),\n      x0 = -sx * x,\n      y0 = -sy * y,\n      t = y0 / x0 < 1,\n      p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),\n      lambda = p[0],\n      phi = p[1],\n      cosPhi = cos(phi);\n  if (t) lambda = -halfPi - lambda;\n  return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];\n};\n\nfunction gringortenHexadecant(lambda, phi) {\n  if (phi === halfPi) return [0, 0];\n  var sinPhi = sin(phi),\n      r = sinPhi * sinPhi,\n      r2 = r * r,\n      j = 1 + r2,\n      k = 1 + 3 * r2,\n      q = 1 - r2,\n      z = asin(1 / sqrt(j)),\n      v = q + r * j * z,\n      p2 = (1 - sinPhi) / v,\n      p = sqrt(p2),\n      a2 = p2 * j,\n      a = sqrt(a2),\n      h = p * q,\n      x,\n      i;\n  if (lambda === 0) return [0, -(h + r * a)];\n  var cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * k) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = 0.5 * dp2dPhi / p,\n      dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,\n      dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * dra2dPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      lambda1 = 4 * lambda / pi,\n      delta; // Slower but accurate bisection method.\n\n  if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {\n    x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);\n    if (lambda > pi / 4) return [x, x];\n    var x1 = x,\n        x0 = 0.5 * x;\n    x = 0.5 * (x0 + x1), i = 50;\n\n    do {\n      var g = sqrt(a2 - x * x),\n          f = x * (zeta + mu * g) + nu * asin(x / a) - lambda1;\n      if (!f) break;\n      if (f < 0) x0 = x;else x1 = x;\n      x = 0.5 * (x0 + x1);\n    } while (abs(x1 - x0) > epsilon && --i > 0);\n  } // Newton-Raphson.\n  else {\n      x = epsilon, i = 25;\n\n      do {\n        var x2 = x * x,\n            g2 = sqrt(a2 - x2),\n            zetaMug = zeta + mu * g2,\n            f2 = x * zetaMug + nu * asin(x / a) - lambda1,\n            df = zetaMug + (nu - mu * x2) / g2;\n        x -= delta = g2 ? f2 / df : 0;\n      } while (abs(delta) > epsilon && --i > 0);\n    }\n\n  return [x, -h - r * sqrt(a2 - x * x)];\n}\n\nfunction gringortenHexadecantInvert(x, y) {\n  var x0 = 0,\n      x1 = 1,\n      r = 0.5,\n      i = 50;\n\n  while (true) {\n    var r2 = r * r,\n        sinPhi = sqrt(r),\n        z = asin(1 / sqrt(1 + r2)),\n        v = 1 - r2 + r * (1 + r2) * z,\n        p2 = (1 - sinPhi) / v,\n        p = sqrt(p2),\n        a2 = p2 * (1 + r2),\n        h = p * (1 - r2),\n        g2 = a2 - x * x,\n        g = sqrt(g2),\n        y0 = y + h + r * g;\n    if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0) break;\n    if (y0 > 0) x0 = r;else x1 = r;\n    r = 0.5 * (x0 + x1);\n  }\n\n  if (!i) return null;\n  var phi = asin(sinPhi),\n      cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = 0.5 * dp2dPhi / p,\n      dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);\n  return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];\n}\n\nexport default function () {\n  return projection(squareRaw(gringortenRaw)).scale(239.75);\n}","import { abs, asin, atan, cos, cosh, epsilon, exp, halfPi, log, pi, pow, quarterPi, sign, sin, sinh, sqrt, tan, tanh } from \"./math.js\"; // Returns [sn, cn, dn](u + iv|m).\n\nexport function ellipticJi(u, v, m) {\n  var a, b, c;\n\n  if (!u) {\n    b = ellipticJ(v, 1 - m);\n    return [[0, b[0] / b[1]], [1 / b[1], 0], [b[2] / b[1], 0]];\n  }\n\n  a = ellipticJ(u, m);\n  if (!v) return [[a[0], 0], [a[1], 0], [a[2], 0]];\n  b = ellipticJ(v, 1 - m);\n  c = b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0];\n  return [[a[0] * b[2] / c, a[1] * a[2] * b[0] * b[1] / c], [a[1] * b[1] / c, -a[0] * a[2] * b[0] * b[2] / c], [a[2] * b[1] * b[2] / c, -m * a[0] * a[1] * b[0] / c]];\n} // Returns [sn, cn, dn, ph](u|m).\n\nexport function ellipticJ(u, m) {\n  var ai, b, phi, t, twon;\n\n  if (m < epsilon) {\n    t = sin(u);\n    b = cos(u);\n    ai = m * (u - t * b) / 4;\n    return [t - ai * b, b + ai * t, 1 - m * t * t / 2, u - ai];\n  }\n\n  if (m >= 1 - epsilon) {\n    ai = (1 - m) / 4;\n    b = cosh(u);\n    t = tanh(u);\n    phi = 1 / b;\n    twon = b * sinh(u);\n    return [t + ai * (twon - u) / (b * b), phi - ai * t * phi * (twon - u), phi + ai * t * phi * (twon + u), 2 * atan(exp(u)) - halfPi + ai * (twon - u) / b];\n  }\n\n  var a = [1, 0, 0, 0, 0, 0, 0, 0, 0],\n      c = [sqrt(m), 0, 0, 0, 0, 0, 0, 0, 0],\n      i = 0;\n  b = sqrt(1 - m);\n  twon = 1;\n\n  while (abs(c[i] / a[i]) > epsilon && i < 8) {\n    ai = a[i++];\n    c[i] = (ai - b) / 2;\n    a[i] = (ai + b) / 2;\n    b = sqrt(ai * b);\n    twon *= 2;\n  }\n\n  phi = twon * a[i] * u;\n\n  do {\n    t = c[i] * sin(b = phi) / a[i];\n    phi = (asin(t) + phi) / 2;\n  } while (--i);\n\n  return [sin(phi), t = cos(phi), t / cos(phi - b), phi];\n} // Calculate F(phi+iPsi|m).\n// See Abramowitz and Stegun, 17.4.11.\n\nexport function ellipticFi(phi, psi, m) {\n  var r = abs(phi),\n      i = abs(psi),\n      sinhPsi = sinh(i);\n\n  if (r) {\n    var cscPhi = 1 / sin(r),\n        cotPhi2 = 1 / (tan(r) * tan(r)),\n        b = -(cotPhi2 + m * (sinhPsi * sinhPsi * cscPhi * cscPhi) - 1 + m),\n        c = (m - 1) * cotPhi2,\n        cotLambda2 = (-b + sqrt(b * b - 4 * c)) / 2;\n    return [ellipticF(atan(1 / sqrt(cotLambda2)), m) * sign(phi), ellipticF(atan(sqrt((cotLambda2 / cotPhi2 - 1) / m)), 1 - m) * sign(psi)];\n  }\n\n  return [0, ellipticF(atan(sinhPsi), 1 - m) * sign(psi)];\n} // Calculate F(phi|m) where m = k² = sin²α.\n// See Abramowitz and Stegun, 17.6.7.\n\nexport function ellipticF(phi, m) {\n  if (!m) return phi;\n  if (m === 1) return log(tan(phi / 2 + quarterPi));\n  var a = 1,\n      b = sqrt(1 - m),\n      c = sqrt(m);\n\n  for (var i = 0; abs(c) > epsilon; i++) {\n    if (phi % pi) {\n      var dPhi = atan(b * tan(phi) / a);\n      if (dPhi < 0) dPhi += pi;\n      phi += dPhi + ~~(phi / pi) * pi;\n    } else phi += phi;\n\n    c = (a + b) / 2;\n    b = sqrt(a * b);\n    c = ((a = c) - b) / 2;\n  }\n\n  return phi / (pow(2, i) * a);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { ellipticF, ellipticFi, ellipticJi } from \"./elliptic.js\";\nimport { abs, atan, atan2, cos, exp, halfPi, log, pi, sin, sqrt, sqrt2, tan } from \"./math.js\";\nimport squareRaw from \"./square.js\";\nexport function guyouRaw(lambda, phi) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      psi = log(tan(pi / 4 + abs(phi) / 2)),\n      r = exp(f * psi) / sqrt(k_),\n      at = guyouComplexAtan(r * cos(f * lambda), r * sin(f * lambda)),\n      t = ellipticFi(at[0], at[1], k * k);\n  return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];\n}\n\nfunction guyouComplexAtan(x, y) {\n  var x2 = x * x,\n      y_1 = y + 1,\n      t = 1 - x2 - y * y;\n  return [0.5 * ((x >= 0 ? halfPi : -halfPi) - atan2(t, 2 * x)), -0.25 * log(t * t + 4 * x2) + 0.5 * log(y_1 * y_1 + x2)];\n}\n\nfunction guyouComplexDivide(a, b) {\n  var denominator = b[0] * b[0] + b[1] * b[1];\n  return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];\n}\n\nguyouRaw.invert = function (x, y) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      j = ellipticJi(0.5 * K - y, -x, k * k),\n      tn = guyouComplexDivide(j[0], j[1]),\n      lambda = atan2(tn[1], tn[0]) / f;\n  return [lambda, 2 * atan(exp(0.5 / f * log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfPi];\n};\n\nexport default function () {\n  return projection(squareRaw(guyouRaw)).scale(151.496);\n}","import { geoProjectionMutator as projectionMutator, geoCircle } from \"d3-geo\";\nimport { abs, acos, asin, atan2, cos, degrees, epsilon, halfPi, radians, sqrt, sin } from \"./math.js\";\nexport function hammerRetroazimuthalRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      rotate = hammerRetroazimuthalRotation(phi0);\n  rotate.invert = hammerRetroazimuthalRotation(-phi0);\n\n  function forward(lambda, phi) {\n    var p = rotate(lambda, phi);\n    lambda = p[0], phi = p[1];\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        cosLambda = cos(lambda),\n        z = acos(sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosLambda),\n        sinz = sin(z),\n        K = abs(sinz) > epsilon ? z / sinz : 1;\n    return [K * cosPhi0 * sin(lambda), (abs(lambda) > halfPi ? K : -K) * ( // rotate for back hemisphere\n    sinPhi0 * cosPhi - cosPhi0 * sinPhi * cosLambda)];\n  }\n\n  forward.invert = function (x, y) {\n    var rho = sqrt(x * x + y * y),\n        sinz = -sin(rho),\n        cosz = cos(rho),\n        a = rho * cosz,\n        b = -y * sinz,\n        c = rho * sinPhi0,\n        d = sqrt(a * a + b * b - c * c),\n        phi = atan2(a * c + b * d, b * c - a * d),\n        lambda = (rho > halfPi ? -1 : 1) * atan2(x * sinz, rho * cos(phi) * cosz + y * sin(phi) * sinz);\n    return rotate.invert(lambda, phi);\n  };\n\n  return forward;\n} // Latitudinal rotation by phi0.\n// Temporary hack until D3 supports arbitrary small-circle clipping origins.\n\nfunction hammerRetroazimuthalRotation(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0);\n  return function (lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi);\n    return [atan2(y, x * cosPhi0 - z * sinPhi0), asin(z * cosPhi0 + x * sinPhi0)];\n  };\n}\n\nexport default function () {\n  var phi0 = 0,\n      m = projectionMutator(hammerRetroazimuthalRaw),\n      p = m(phi0),\n      rotate_ = p.rotate,\n      stream_ = p.stream,\n      circle = geoCircle();\n\n  p.parallel = function (_) {\n    if (!arguments.length) return phi0 * degrees;\n    var r = p.rotate();\n    return m(phi0 = _ * radians).rotate(r);\n  }; // Temporary hack; see hammerRetroazimuthalRotation.\n\n\n  p.rotate = function (_) {\n    if (!arguments.length) return _ = rotate_.call(p), _[1] += phi0 * degrees, _;\n    rotate_.call(p, [_[0], _[1] - phi0 * degrees]);\n    circle.center([-_[0], -_[1]]);\n    return p;\n  };\n\n  p.stream = function (stream) {\n    stream = stream_(stream);\n\n    stream.sphere = function () {\n      stream.polygonStart();\n      var epsilon = 1e-2,\n          ring = circle.radius(90 - epsilon)().coordinates[0],\n          n = ring.length - 1,\n          i = -1,\n          p;\n      stream.lineStart();\n\n      while (++i < n) {\n        stream.point((p = ring[i])[0], p[1]);\n      }\n\n      stream.lineEnd();\n      ring = circle.radius(90 + epsilon)().coordinates[0];\n      n = ring.length - 1;\n      stream.lineStart();\n\n      while (--i >= 0) {\n        stream.point((p = ring[i])[0], p[1]);\n      }\n\n      stream.lineEnd();\n      stream.polygonEnd();\n    };\n\n    return stream;\n  };\n\n  return p.scale(79.4187).parallel(45).clipAngle(180 - 1e-3);\n}","import { range } from \"d3-array\";\nimport { geoStream, geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { collignonRaw } from \"./collignon.js\";\nimport { cylindricalEqualAreaRaw } from \"./cylindricalEqualArea.js\";\nimport { abs, asin, degrees, epsilon, floor, max, min, pi, radians, sqrtPi, tau } from \"./math.js\";\nvar K = 3,\n    healpixParallel = asin(1 - 1 / K) * degrees,\n    healpixLambert = cylindricalEqualAreaRaw(0);\nexport function healpixRaw(H) {\n  var phi0 = healpixParallel * radians,\n      dx = collignonRaw(pi, phi0)[0] - collignonRaw(-pi, phi0)[0],\n      y0 = healpixLambert(0, phi0)[1],\n      y1 = collignonRaw(0, phi0)[1],\n      dy1 = sqrtPi - y1,\n      k = tau / H,\n      w = 4 / tau,\n      h = y0 + dy1 * dy1 * 4 / tau;\n\n  function forward(lambda, phi) {\n    var point,\n        phi2 = abs(phi);\n\n    if (phi2 > phi0) {\n      var i = min(H - 1, max(0, floor((lambda + pi) / k)));\n      lambda += pi * (H - 1) / H - i * k;\n      point = collignonRaw(lambda, phi2);\n      point[0] = point[0] * tau / dx - tau * (H - 1) / (2 * H) + i * tau / H;\n      point[1] = y0 + (point[1] - y1) * 4 * dy1 / tau;\n      if (phi < 0) point[1] = -point[1];\n    } else {\n      point = healpixLambert(lambda, phi);\n    }\n\n    point[0] *= w, point[1] /= h;\n    return point;\n  }\n\n  forward.invert = function (x, y) {\n    x /= w, y *= h;\n    var y2 = abs(y);\n\n    if (y2 > y0) {\n      var i = min(H - 1, max(0, floor((x + pi) / k)));\n      x = (x + pi * (H - 1) / H - i * k) * dx / tau;\n      var point = collignonRaw.invert(x, 0.25 * (y2 - y0) * tau / dy1 + y1);\n      point[0] -= pi * (H - 1) / H - i * k;\n      if (y < 0) point[1] = -point[1];\n      return point;\n    }\n\n    return healpixLambert.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction sphereTop(x, i) {\n  return [x, i & 1 ? 90 - epsilon : healpixParallel];\n}\n\nfunction sphereBottom(x, i) {\n  return [x, i & 1 ? -90 + epsilon : -healpixParallel];\n}\n\nfunction sphereNudge(d) {\n  return [d[0] * (1 - epsilon), d[1]];\n}\n\nfunction sphere(step) {\n  var c = [].concat(range(-180, 180 + step / 2, step).map(sphereTop), range(180, -180 - step / 2, -step).map(sphereBottom));\n  return {\n    type: \"Polygon\",\n    coordinates: [step === 180 ? c.map(sphereNudge) : c]\n  };\n}\n\nexport default function () {\n  var H = 4,\n      m = projectionMutator(healpixRaw),\n      p = m(H),\n      stream_ = p.stream;\n\n  p.lobes = function (_) {\n    return arguments.length ? m(H = +_) : H;\n  };\n\n  p.stream = function (stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n\n    rotateStream.sphere = function () {\n      geoStream(sphere(180 / H), sphereStream);\n    };\n\n    return rotateStream;\n  };\n\n  return p.scale(239.75);\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { abs, acos, asin, atan2, cos, epsilon2, halfPi, pi, sin, sqrt } from \"./math.js\";\nexport function hillRaw(K) {\n  var L = 1 + K,\n      sinBt = sin(1 / L),\n      Bt = asin(sinBt),\n      A = 2 * sqrt(pi / (B = pi + 4 * Bt * L)),\n      B,\n      rho0 = 0.5 * A * (L + sqrt(K * (2 + K))),\n      K2 = K * K,\n      L2 = L * L;\n\n  function forward(lambda, phi) {\n    var t = 1 - sin(phi),\n        rho,\n        omega;\n\n    if (t && t < 2) {\n      var theta = halfPi - phi,\n          i = 25,\n          delta;\n\n      do {\n        var sinTheta = sin(theta),\n            cosTheta = cos(theta),\n            Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta),\n            C = 1 + L2 - 2 * L * cosTheta;\n        theta -= delta = (theta - K2 * Bt - L * sinTheta + C * Bt_Bt1 - 0.5 * t * B) / (2 * L * sinTheta * Bt_Bt1);\n      } while (abs(delta) > epsilon2 && --i > 0);\n\n      rho = A * sqrt(C);\n      omega = lambda * Bt_Bt1 / pi;\n    } else {\n      rho = A * (K + t);\n      omega = lambda * Bt / pi;\n    }\n\n    return [rho * sin(omega), rho0 - rho * cos(omega)];\n  }\n\n  forward.invert = function (x, y) {\n    var rho2 = x * x + (y -= rho0) * y,\n        cosTheta = (1 + L2 - rho2 / (A * A)) / (2 * L),\n        theta = acos(cosTheta),\n        sinTheta = sin(theta),\n        Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta);\n    return [asin(x / sqrt(rho2)) * pi / Bt_Bt1, asin(1 - 2 * (theta - K2 * Bt - L * sinTheta + (1 + L2 - 2 * L * cosTheta) * Bt_Bt1) / B)];\n  };\n\n  return forward;\n}\nexport default function () {\n  var K = 1,\n      m = projectionMutator(hillRaw),\n      p = m(K);\n\n  p.ratio = function (_) {\n    return arguments.length ? m(K = +_) : K;\n  };\n\n  return p.scale(167.774).center([0, 18.67]);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { mollweideRaw } from \"./mollweide.js\";\nimport { sinusoidalRaw } from \"./sinusoidal.js\";\nexport var sinuMollweidePhi = 0.7109889596207567;\nexport var sinuMollweideY = 0.0528035274542;\nexport function sinuMollweideRaw(lambda, phi) {\n  return phi > -sinuMollweidePhi ? (lambda = mollweideRaw(lambda, phi), lambda[1] += sinuMollweideY, lambda) : sinusoidalRaw(lambda, phi);\n}\n\nsinuMollweideRaw.invert = function (x, y) {\n  return y > -sinuMollweidePhi ? mollweideRaw.invert(x, y - sinuMollweideY) : sinusoidalRaw.invert(x, y);\n};\n\nexport default function () {\n  return projection(sinuMollweideRaw).rotate([-20, -55]).scale(164.263).center([0, -5.4036]);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs } from \"./math.js\";\nimport { mollweideRaw } from \"./mollweide.js\";\nimport { sinusoidalRaw } from \"./sinusoidal.js\";\nimport { sinuMollweidePhi, sinuMollweideY } from \"./sinuMollweide.js\";\nexport function homolosineRaw(lambda, phi) {\n  return abs(phi) > sinuMollweidePhi ? (lambda = mollweideRaw(lambda, phi), lambda[1] -= phi > 0 ? sinuMollweideY : -sinuMollweideY, lambda) : sinusoidalRaw(lambda, phi);\n}\n\nhomolosineRaw.invert = function (x, y) {\n  return abs(y) > sinuMollweidePhi ? mollweideRaw.invert(x, y + (y > 0 ? sinuMollweideY : -sinuMollweideY)) : sinusoidalRaw.invert(x, y);\n};\n\nexport default function () {\n  return projection(homolosineRaw).scale(152.63);\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { asin, cos, degrees, pi, radians, sign, sin, sqrt } from \"./math.js\";\nimport { solve } from \"./newton.js\";\nexport function hufnagelRaw(a, b, psiMax, ratio) {\n  var k = sqrt(4 * pi / (2 * psiMax + (1 + a - b / 2) * sin(2 * psiMax) + (a + b) / 2 * sin(4 * psiMax) + b / 2 * sin(6 * psiMax))),\n      c = sqrt(ratio * sin(psiMax) * sqrt((1 + a * cos(2 * psiMax) + b * cos(4 * psiMax)) / (1 + a + b))),\n      M = psiMax * mapping(1);\n\n  function radius(psi) {\n    return sqrt(1 + a * cos(2 * psi) + b * cos(4 * psi));\n  }\n\n  function mapping(t) {\n    var psi = t * psiMax;\n    return (2 * psi + (1 + a - b / 2) * sin(2 * psi) + (a + b) / 2 * sin(4 * psi) + b / 2 * sin(6 * psi)) / psiMax;\n  }\n\n  function inversemapping(psi) {\n    return radius(psi) * sin(psi);\n  }\n\n  var forward = function forward(lambda, phi) {\n    var psi = psiMax * solve(mapping, M * sin(phi) / psiMax, phi / pi);\n    if (isNaN(psi)) psi = psiMax * sign(phi);\n    var kr = k * radius(psi);\n    return [kr * c * lambda / pi * cos(psi), kr / c * sin(psi)];\n  };\n\n  forward.invert = function (x, y) {\n    var psi = solve(inversemapping, y * c / k);\n    return [x * pi / (cos(psi) * k * c * radius(psi)), asin(psiMax * mapping(psi / psiMax) / M)];\n  };\n\n  if (psiMax === 0) {\n    k = sqrt(ratio / pi);\n\n    forward = function forward(lambda, phi) {\n      return [lambda * k, sin(phi) / k];\n    };\n\n    forward.invert = function (x, y) {\n      return [x / k, asin(y * k)];\n    };\n  }\n\n  return forward;\n}\nexport default function () {\n  var a = 1,\n      b = 0,\n      psiMax = 45 * radians,\n      ratio = 2,\n      mutate = projectionMutator(hufnagelRaw),\n      projection = mutate(a, b, psiMax, ratio);\n\n  projection.a = function (_) {\n    return arguments.length ? mutate(a = +_, b, psiMax, ratio) : a;\n  };\n\n  projection.b = function (_) {\n    return arguments.length ? mutate(a, b = +_, psiMax, ratio) : b;\n  };\n\n  projection.psiMax = function (_) {\n    return arguments.length ? mutate(a, b, psiMax = +_ * radians, ratio) : psiMax * degrees;\n  };\n\n  projection.ratio = function (_) {\n    return arguments.length ? mutate(a, b, psiMax, ratio = +_) : ratio;\n  };\n\n  return projection.scale(180.739);\n}","// https://github.com/scijs/integrate-adaptive-simpson\n// This algorithm adapted from pseudocode in:\n// http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf\nfunction adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {\n  if (state.nanEncountered) {\n    return NaN;\n  }\n\n  var h, f1, f2, sl, sr, s2, m, V1, V2, err;\n  h = b - a;\n  f1 = f(a + h * 0.25);\n  f2 = f(b - h * 0.25); // Simple check for NaN:\n\n  if (isNaN(f1)) {\n    state.nanEncountered = true;\n    return;\n  } // Simple check for NaN:\n\n\n  if (isNaN(f2)) {\n    state.nanEncountered = true;\n    return;\n  }\n\n  sl = h * (fa + 4 * f1 + fm) / 12;\n  sr = h * (fm + 4 * f2 + fb) / 12;\n  s2 = sl + sr;\n  err = (s2 - V0) / 15;\n\n  if (depth > maxdepth) {\n    state.maxDepthCount++;\n    return s2 + err;\n  } else if (Math.abs(err) < tol) {\n    return s2 + err;\n  } else {\n    m = a + h * 0.5;\n    V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);\n\n    if (isNaN(V1)) {\n      state.nanEncountered = true;\n      return NaN;\n    }\n\n    V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);\n\n    if (isNaN(V2)) {\n      state.nanEncountered = true;\n      return NaN;\n    }\n\n    return V1 + V2;\n  }\n}\n\nexport function integrate(f, a, b, tol, maxdepth) {\n  var state = {\n    maxDepthCount: 0,\n    nanEncountered: false\n  };\n\n  if (tol === undefined) {\n    tol = 1e-8;\n  }\n\n  if (maxdepth === undefined) {\n    maxdepth = 20;\n  }\n\n  var fa = f(a);\n  var fm = f(0.5 * (a + b));\n  var fb = f(b);\n  var V0 = (fa + 4 * fm + fb) * (b - a) / 6;\n  var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);\n  /*\n    if (state.maxDepthCount > 0 && console && console.warn) {\n      console.warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');\n    }\n  \n    if (state.nanEncountered && console && console.warn) {\n      console.warn('integrate-adaptive-simpson: Warning: NaN encountered. Halting early.');\n    }\n  */\n\n  return result;\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { abs, asin, pi, pow, sign, sin } from \"./math.js\";\nimport { integrate } from \"./integrate.js\";\nexport function hyperellipticalRaw(alpha, k, gamma) {\n  function elliptic(f) {\n    return alpha + (1 - alpha) * pow(1 - pow(f, k), 1 / k);\n  }\n\n  function z(f) {\n    return integrate(elliptic, 0, f, 1e-4);\n  }\n\n  var G = 1 / z(1),\n      n = 1000,\n      m = (1 + 1e-8) * G,\n      approx = [];\n\n  for (var i = 0; i <= n; i++) {\n    approx.push(z(i / n) * m);\n  }\n\n  function Y(sinphi) {\n    var rmin = 0,\n        rmax = n,\n        r = n >> 1;\n\n    do {\n      if (approx[r] > sinphi) rmax = r;else rmin = r;\n      r = rmin + rmax >> 1;\n    } while (r > rmin);\n\n    var u = approx[r + 1] - approx[r];\n    if (u) u = (sinphi - approx[r + 1]) / u;\n    return (r + 1 + u) / n;\n  }\n\n  var ratio = 2 * Y(1) / pi * G / gamma;\n\n  var forward = function forward(lambda, phi) {\n    var y = Y(abs(sin(phi))),\n        x = elliptic(y) * lambda;\n    y /= ratio;\n    return [x, phi >= 0 ? y : -y];\n  };\n\n  forward.invert = function (x, y) {\n    var phi;\n    y *= ratio;\n    if (abs(y) < 1) phi = sign(y) * asin(z(abs(y)) * G);\n    return [x / elliptic(abs(y)), phi];\n  };\n\n  return forward;\n}\nexport default function () {\n  var alpha = 0,\n      k = 2.5,\n      gamma = 1.183136,\n      // affine = sqrt(2 * gamma / pi) = 0.8679\n  m = projectionMutator(hyperellipticalRaw),\n      p = m(alpha, k, gamma);\n\n  p.alpha = function (_) {\n    return arguments.length ? m(alpha = +_, k, gamma) : alpha;\n  };\n\n  p.k = function (_) {\n    return arguments.length ? m(alpha, k = +_, gamma) : k;\n  };\n\n  p.gamma = function (_) {\n    return arguments.length ? m(alpha, k, gamma = +_) : gamma;\n  };\n\n  return p.scale(152.63);\n}","import { merge } from \"d3-array\";\nimport { geoStream, geoProjection as projection } from \"d3-geo\";\nimport { abs, degrees, epsilon, radians } from \"../math.js\";\n\nfunction pointEqual(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n\nfunction interpolateLine(coordinates, m) {\n  var i = -1,\n      n = coordinates.length,\n      p0 = coordinates[0],\n      p1,\n      dx,\n      dy,\n      resampled = [];\n\n  while (++i < n) {\n    p1 = coordinates[i];\n    dx = (p1[0] - p0[0]) / m;\n    dy = (p1[1] - p0[1]) / m;\n\n    for (var j = 0; j < m; ++j) {\n      resampled.push([p0[0] + j * dx, p0[1] + j * dy]);\n    }\n\n    p0 = p1;\n  }\n\n  resampled.push(p1);\n  return resampled;\n}\n\nfunction interpolateSphere(lobes) {\n  var coordinates = [],\n      lobe,\n      lambda0,\n      phi0,\n      phi1,\n      lambda2,\n      phi2,\n      i,\n      n = lobes[0].length; // Northern Hemisphere\n\n  for (i = 0; i < n; ++i) {\n    lobe = lobes[0][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([[lambda0 + epsilon, phi0 + epsilon], [lambda0 + epsilon, phi1 - epsilon], [lambda2 - epsilon, phi1 - epsilon], [lambda2 - epsilon, phi2 + epsilon]], 30));\n  } // Southern Hemisphere\n\n\n  for (i = lobes[1].length - 1; i >= 0; --i) {\n    lobe = lobes[1][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([[lambda2 - epsilon, phi2 - epsilon], [lambda2 - epsilon, phi1 + epsilon], [lambda0 + epsilon, phi1 + epsilon], [lambda0 + epsilon, phi0 - epsilon]], 30));\n  }\n\n  return {\n    type: \"Polygon\",\n    coordinates: [merge(coordinates)]\n  };\n}\n\nexport default function (project, lobes, inverse) {\n  var sphere, bounds;\n\n  function forward(lambda, phi) {\n    var sign = phi < 0 ? -1 : +1,\n        lobe = lobes[+(phi < 0)];\n\n    for (var i = 0, n = lobe.length - 1; i < n && lambda > lobe[i][2][0]; ++i) {\n      ;\n    }\n\n    var p = project(lambda - lobe[i][1][0], phi);\n    p[0] += project(lobe[i][1][0], sign * phi > sign * lobe[i][0][1] ? lobe[i][0][1] : phi)[0];\n    return p;\n  }\n\n  if (inverse) {\n    forward.invert = inverse(forward);\n  } else if (project.invert) {\n    forward.invert = function (x, y) {\n      var bound = bounds[+(y < 0)],\n          lobe = lobes[+(y < 0)];\n\n      for (var i = 0, n = bound.length; i < n; ++i) {\n        var b = bound[i];\n\n        if (b[0][0] <= x && x < b[1][0] && b[0][1] <= y && y < b[1][1]) {\n          var p = project.invert(x - project(lobe[i][1][0], 0)[0], y);\n          p[0] += lobe[i][1][0];\n          return pointEqual(forward(p[0], p[1]), [x, y]) ? p : null;\n        }\n      }\n    };\n  }\n\n  var p = projection(forward),\n      stream_ = p.stream;\n\n  p.stream = function (stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n\n    rotateStream.sphere = function () {\n      geoStream(sphere, sphereStream);\n    };\n\n    return rotateStream;\n  };\n\n  p.lobes = function (_) {\n    if (!arguments.length) return lobes.map(function (lobe) {\n      return lobe.map(function (l) {\n        return [[l[0][0] * degrees, l[0][1] * degrees], [l[1][0] * degrees, l[1][1] * degrees], [l[2][0] * degrees, l[2][1] * degrees]];\n      });\n    });\n    sphere = interpolateSphere(_);\n    lobes = _.map(function (lobe) {\n      return lobe.map(function (l) {\n        return [[l[0][0] * radians, l[0][1] * radians], [l[1][0] * radians, l[1][1] * radians], [l[2][0] * radians, l[2][1] * radians]];\n      });\n    });\n    bounds = lobes.map(function (lobe) {\n      return lobe.map(function (l) {\n        var x0 = project(l[0][0], l[0][1])[0],\n            x1 = project(l[2][0], l[2][1])[0],\n            y0 = project(l[1][0], l[0][1])[1],\n            y1 = project(l[1][0], l[1][1])[1],\n            t;\n        if (y0 > y1) t = y0, y0 = y1, y1 = t;\n        return [[x0, y0], [x1, y1]];\n      });\n    });\n    return p;\n  };\n\n  if (lobes != null) p.lobes(lobes);\n  return p;\n}","import { boggsRaw } from \"../boggs.js\";\nimport interrupt from \"./index.js\";\nvar lobes = [[// northern hemisphere\n[[-180, 0], [-100, 90], [-40, 0]], [[-40, 0], [30, 90], [180, 0]]], [// southern hemisphere\n[[-180, 0], [-160, -90], [-100, 0]], [[-100, 0], [-60, -90], [-20, 0]], [[-20, 0], [20, -90], [80, 0]], [[80, 0], [140, -90], [180, 0]]]];\nexport default function () {\n  return interrupt(boggsRaw, lobes).scale(160.857);\n}","import { homolosineRaw } from \"../homolosine.js\";\nimport interrupt from \"./index.js\";\nvar lobes = [[// northern hemisphere\n[[-180, 0], [-100, 90], [-40, 0]], [[-40, 0], [30, 90], [180, 0]]], [// southern hemisphere\n[[-180, 0], [-160, -90], [-100, 0]], [[-100, 0], [-60, -90], [-20, 0]], [[-20, 0], [20, -90], [80, 0]], [[80, 0], [140, -90], [180, 0]]]];\nexport default function () {\n  return interrupt(homolosineRaw, lobes).scale(152.63);\n}","import { mollweideRaw } from \"../mollweide.js\";\nimport interrupt from \"./index.js\";\nvar lobes = [[// northern hemisphere\n[[-180, 0], [-100, 90], [-40, 0]], [[-40, 0], [30, 90], [180, 0]]], [// southern hemisphere\n[[-180, 0], [-160, -90], [-100, 0]], [[-100, 0], [-60, -90], [-20, 0]], [[-20, 0], [20, -90], [80, 0]], [[80, 0], [140, -90], [180, 0]]]];\nexport default function () {\n  return interrupt(mollweideRaw, lobes).scale(169.529);\n}","import { mollweideRaw } from \"../mollweide.js\";\nimport interrupt from \"./index.js\";\nvar lobes = [[// northern hemisphere\n[[-180, 0], [-90, 90], [0, 0]], [[0, 0], [90, 90], [180, 0]]], [// southern hemisphere\n[[-180, 0], [-90, -90], [0, 0]], [[0, 0], [90, -90], [180, 0]]]];\nexport default function () {\n  return interrupt(mollweideRaw, lobes).scale(169.529).rotate([20, 0]);\n}","import { sinuMollweideRaw } from \"../sinuMollweide.js\";\nimport interrupt from \"./index.js\";\nimport { solve2d } from \"../newton.js\";\nvar lobes = [[// northern hemisphere\n[[-180, 35], [-30, 90], [0, 35]], [[0, 35], [30, 90], [180, 35]]], [// southern hemisphere\n[[-180, -10], [-102, -90], [-65, -10]], [[-65, -10], [5, -90], [77, -10]], [[77, -10], [103, -90], [180, -10]]]];\nexport default function () {\n  return interrupt(sinuMollweideRaw, lobes, solve2d).rotate([-20, -55]).scale(164.263).center([0, -5.4036]);\n}","import { sinusoidalRaw } from \"../sinusoidal.js\";\nimport interrupt from \"./index.js\";\nvar lobes = [[// northern hemisphere\n[[-180, 0], [-110, 90], [-40, 0]], [[-40, 0], [0, 90], [40, 0]], [[40, 0], [110, 90], [180, 0]]], [// southern hemisphere\n[[-180, 0], [-110, -90], [-40, 0]], [[-40, 0], [0, -90], [40, 0]], [[40, 0], [110, -90], [180, 0]]]];\nexport default function () {\n  return interrupt(sinusoidalRaw, lobes).scale(152.63).rotate([-20, 0]);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { pi, sqrt, tau } from \"./math.js\";\nexport function kavrayskiy7Raw(lambda, phi) {\n  return [3 / tau * lambda * sqrt(pi * pi / 3 - phi * phi), phi];\n}\n\nkavrayskiy7Raw.invert = function (x, y) {\n  return [tau / 3 * x / sqrt(pi * pi / 3 - y * y), y];\n};\n\nexport default function () {\n  return projection(kavrayskiy7Raw).scale(158.837);\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { abs, asin, atan2, cos, epsilon, halfPi, pow, sign, sin } from \"./math.js\";\nexport function lagrangeRaw(n) {\n  function forward(lambda, phi) {\n    if (abs(abs(phi) - halfPi) < epsilon) return [0, phi < 0 ? -2 : 2];\n    var sinPhi = sin(phi),\n        v = pow((1 + sinPhi) / (1 - sinPhi), n / 2),\n        c = 0.5 * (v + 1 / v) + cos(lambda *= n);\n    return [2 * sin(lambda) / c, (v - 1 / v) / c];\n  }\n\n  forward.invert = function (x, y) {\n    var y0 = abs(y);\n    if (abs(y0 - 2) < epsilon) return x ? null : [0, sign(y) * halfPi];\n    if (y0 > 2) return null;\n    x /= 2, y /= 2;\n    var x2 = x * x,\n        y2 = y * y,\n        t = 2 * y / (1 + x2 + y2); // tanh(nPhi)\n\n    t = pow((1 + t) / (1 - t), 1 / n);\n    return [atan2(2 * x, 1 - x2 - y2) / n, asin((t - 1) / (t + 1))];\n  };\n\n  return forward;\n}\nexport default function () {\n  var n = 0.5,\n      m = projectionMutator(lagrangeRaw),\n      p = m(n);\n\n  p.spacing = function (_) {\n    return arguments.length ? m(n = +_) : n;\n  };\n\n  return p.scale(124.75);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, acos, cos, epsilon, halfPi, sin, pi, sqrt, sqrt2 } from \"./math.js\";\nvar pi_sqrt2 = pi / sqrt2;\nexport function larriveeRaw(lambda, phi) {\n  return [lambda * (1 + sqrt(cos(phi))) / 2, phi / (cos(phi / 2) * cos(lambda / 6))];\n}\n\nlarriveeRaw.invert = function (x, y) {\n  var x0 = abs(x),\n      y0 = abs(y),\n      lambda = epsilon,\n      phi = halfPi;\n  if (y0 < pi_sqrt2) phi *= y0 / pi_sqrt2;else lambda += 6 * acos(pi_sqrt2 / y0);\n\n  for (var i = 0; i < 25; i++) {\n    var sinPhi = sin(phi),\n        sqrtcosPhi = sqrt(cos(phi)),\n        sinPhi_2 = sin(phi / 2),\n        cosPhi_2 = cos(phi / 2),\n        sinLambda_6 = sin(lambda / 6),\n        cosLambda_6 = cos(lambda / 6),\n        f0 = 0.5 * lambda * (1 + sqrtcosPhi) - x0,\n        f1 = phi / (cosPhi_2 * cosLambda_6) - y0,\n        df0dPhi = sqrtcosPhi ? -0.25 * lambda * sinPhi / sqrtcosPhi : 0,\n        df0dLambda = 0.5 * (1 + sqrtcosPhi),\n        df1dPhi = (1 + 0.5 * phi * sinPhi_2 / cosPhi_2) / (cosPhi_2 * cosLambda_6),\n        df1dLambda = phi / cosPhi_2 * (sinLambda_6 / 6) / (cosLambda_6 * cosLambda_6),\n        denom = df0dPhi * df1dLambda - df1dPhi * df0dLambda,\n        dPhi = (f0 * df1dLambda - f1 * df0dLambda) / denom,\n        dLambda = (f1 * df0dPhi - f0 * df1dPhi) / denom;\n    phi -= dPhi;\n    lambda -= dLambda;\n    if (abs(dPhi) < epsilon && abs(dLambda) < epsilon) break;\n  }\n\n  return [x < 0 ? -lambda : lambda, y < 0 ? -phi : phi];\n};\n\nexport default function () {\n  return projection(larriveeRaw).scale(97.2672);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, epsilon, pi, sign } from \"./math.js\";\nexport function laskowskiRaw(lambda, phi) {\n  var lambda2 = lambda * lambda,\n      phi2 = phi * phi;\n  return [lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)), phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032))];\n}\n\nlaskowskiRaw.invert = function (x, y) {\n  var lambda = sign(x) * pi,\n      phi = y / 2,\n      i = 50;\n\n  do {\n    var lambda2 = lambda * lambda,\n        phi2 = phi * phi,\n        lambdaPhi = lambda * phi,\n        fx = lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)) - x,\n        fy = phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032)) - y,\n        deltaxDeltaLambda = 0.975534 - phi2 * (0.119161 + 3 * lambda2 * 0.0143059 + phi2 * 0.0547009),\n        deltaxDeltaPhi = -lambdaPhi * (2 * 0.119161 + 4 * 0.0547009 * phi2 + 2 * 0.0143059 * lambda2),\n        deltayDeltaLambda = lambdaPhi * (2 * 0.0802894 + 4 * 0.000199025 * lambda2 + 2 * -0.02855 * phi2),\n        deltayDeltaPhi = 1.00384 + lambda2 * (0.0802894 + 0.000199025 * lambda2) + phi2 * (3 * (0.0998909 - 0.02855 * lambda2) - 5 * 0.0491032 * phi2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda,\n        deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda, phi -= deltaPhi;\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n\n  return i && [lambda, phi];\n};\n\nexport default function () {\n  return projection(laskowskiRaw).scale(139.98);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { acos, asin, cos, sign, sin, tan, sqrt, sqrt1_2 } from \"./math.js\";\nexport function littrowRaw(lambda, phi) {\n  return [sin(lambda) / cos(phi), tan(phi) * cos(lambda)];\n}\n\nlittrowRaw.invert = function (x, y) {\n  var x2 = x * x,\n      y2 = y * y,\n      y2_1 = y2 + 1,\n      x2_y2_1 = x2 + y2_1,\n      cosPhi = x ? sqrt1_2 * sqrt((x2_y2_1 - sqrt(x2_y2_1 * x2_y2_1 - 4 * x2)) / x2) : 1 / sqrt(y2_1);\n  return [asin(x * cosPhi), sign(y) * acos(cosPhi)];\n};\n\nexport default function () {\n  return projection(littrowRaw).scale(144.049).clipAngle(90 - 1e-3);\n}","import parallel1 from \"./parallel1.js\";\nimport { abs, cos, epsilon, halfPi, log, quarterPi, tan } from \"./math.js\";\nexport function loximuthalRaw(phi0) {\n  var cosPhi0 = cos(phi0),\n      tanPhi0 = tan(quarterPi + phi0 / 2);\n\n  function forward(lambda, phi) {\n    var y = phi - phi0,\n        x = abs(y) < epsilon ? lambda * cosPhi0 : abs(x = quarterPi + phi / 2) < epsilon || abs(abs(x) - halfPi) < epsilon ? 0 : lambda * y / log(tan(x) / tanPhi0);\n    return [x, y];\n  }\n\n  forward.invert = function (x, y) {\n    var lambda,\n        phi = y + phi0;\n    return [abs(y) < epsilon ? x / cosPhi0 : abs(lambda = quarterPi + phi / 2) < epsilon || abs(abs(lambda) - halfPi) < epsilon ? 0 : x * log(tan(lambda) / tanPhi0) / y, phi];\n  };\n\n  return forward;\n}\nexport default function () {\n  return parallel1(loximuthalRaw).parallel(40).scale(158.837);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { atan, exp, log, quarterPi, pi, tan } from \"./math.js\";\nexport function millerRaw(lambda, phi) {\n  return [lambda, 1.25 * log(tan(quarterPi + 0.4 * phi))];\n}\n\nmillerRaw.invert = function (x, y) {\n  return [x, 2.5 * atan(exp(0.8 * y)) - 0.625 * pi];\n};\n\nexport default function () {\n  return projection(millerRaw).scale(108.318);\n}","import { geoProjection as projection, geoRotation as rotation } from \"d3-geo\";\nimport { abs, asin, atan, atan2, cos, epsilon, sin, sqrt } from \"./math.js\";\nexport function modifiedStereographicRaw(C) {\n  var m = C.length - 1;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = 2 / (1 + cosPhi * cos(lambda)),\n        zr = k * cosPhi * sin(lambda),\n        zi = k * sin(phi),\n        i = m,\n        w = C[i],\n        ar = w[0],\n        ai = w[1],\n        t;\n\n    while (--i >= 0) {\n      w = C[i];\n      ar = w[0] + zr * (t = ar) - zi * ai;\n      ai = w[1] + zr * ai + zi * t;\n    }\n\n    ar = zr * (t = ar) - zi * ai;\n    ai = zr * ai + zi * t;\n    return [ar, ai];\n  }\n\n  forward.invert = function (x, y) {\n    var i = 20,\n        zr = x,\n        zi = y;\n\n    do {\n      var j = m,\n          w = C[j],\n          ar = w[0],\n          ai = w[1],\n          br = 0,\n          bi = 0,\n          t;\n\n      while (--j >= 0) {\n        w = C[j];\n        br = ar + zr * (t = br) - zi * bi;\n        bi = ai + zr * bi + zi * t;\n        ar = w[0] + zr * (t = ar) - zi * ai;\n        ai = w[1] + zr * ai + zi * t;\n      }\n\n      br = ar + zr * (t = br) - zi * bi;\n      bi = ai + zr * bi + zi * t;\n      ar = zr * (t = ar) - zi * ai - x;\n      ai = zr * ai + zi * t - y;\n      var denominator = br * br + bi * bi,\n          deltar,\n          deltai;\n      zr -= deltar = (ar * br + ai * bi) / denominator;\n      zi -= deltai = (ai * br - ar * bi) / denominator;\n    } while (abs(deltar) + abs(deltai) > epsilon * epsilon && --i > 0);\n\n    if (i) {\n      var rho = sqrt(zr * zr + zi * zi),\n          c = 2 * atan(rho * 0.5),\n          sinc = sin(c);\n      return [atan2(zr * sinc, rho * cos(c)), rho ? asin(zi * sinc / rho) : 0];\n    }\n  };\n\n  return forward;\n}\nvar alaska = [[0.9972523, 0], [0.0052513, -0.0041175], [0.0074606, 0.0048125], [-0.0153783, -0.1968253], [0.0636871, -0.1408027], [0.3660976, -0.2937382]],\n    gs48 = [[0.98879, 0], [0, 0], [-0.050909, 0], [0, 0], [0.075528, 0]],\n    gs50 = [[0.9842990, 0], [0.0211642, 0.0037608], [-0.1036018, -0.0575102], [-0.0329095, -0.0320119], [0.0499471, 0.1223335], [0.0260460, 0.0899805], [0.0007388, -0.1435792], [0.0075848, -0.1334108], [-0.0216473, 0.0776645], [-0.0225161, 0.0853673]],\n    miller = [[0.9245, 0], [0, 0], [0.01943, 0]],\n    lee = [[0.721316, 0], [0, 0], [-0.00881625, -0.00617325]];\nexport function modifiedStereographicAlaska() {\n  return modifiedStereographic(alaska, [152, -64]).scale(1400).center([-160.908, 62.4864]).clipAngle(30).angle(7.8);\n}\nexport function modifiedStereographicGs48() {\n  return modifiedStereographic(gs48, [95, -38]).scale(1000).clipAngle(55).center([-96.5563, 38.8675]);\n}\nexport function modifiedStereographicGs50() {\n  return modifiedStereographic(gs50, [120, -45]).scale(359.513).clipAngle(55).center([-117.474, 53.0628]);\n}\nexport function modifiedStereographicMiller() {\n  return modifiedStereographic(miller, [-20, -18]).scale(209.091).center([20, 16.7214]).clipAngle(82);\n}\nexport function modifiedStereographicLee() {\n  return modifiedStereographic(lee, [165, 10]).scale(250).clipAngle(130).center([-165, -10]);\n}\nexport default function modifiedStereographic(coefficients, rotate) {\n  var p = projection(modifiedStereographicRaw(coefficients)).rotate(rotate).clipAngle(90),\n      r = rotation(rotate),\n      center = p.center;\n  delete p.rotate;\n\n  p.center = function (_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p;\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { asin, cos, sin, sqrt } from \"./math.js\";\nvar sqrt6 = sqrt(6),\n    sqrt7 = sqrt(7);\nexport function mtFlatPolarParabolicRaw(lambda, phi) {\n  var theta = asin(7 * sin(phi) / (3 * sqrt6));\n  return [sqrt6 * lambda * (2 * cos(2 * theta / 3) - 1) / sqrt7, 9 * sin(theta / 3) / sqrt7];\n}\n\nmtFlatPolarParabolicRaw.invert = function (x, y) {\n  var theta = 3 * asin(y * sqrt7 / 9);\n  return [x * sqrt7 / (sqrt6 * (2 * cos(2 * theta / 3) - 1)), asin(sin(theta) * 3 * sqrt6 / 7)];\n};\n\nexport default function () {\n  return projection(mtFlatPolarParabolicRaw).scale(164.859);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, sin, sqrt, sqrt1_2, sqrt2 } from \"./math.js\";\nexport function mtFlatPolarQuarticRaw(lambda, phi) {\n  var k = (1 + sqrt1_2) * sin(phi),\n      theta = phi;\n\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (sin(theta / 2) + sin(theta) - k) / (0.5 * cos(theta / 2) + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n\n  return [lambda * (1 + 2 * cos(theta) / cos(theta / 2)) / (3 * sqrt2), 2 * sqrt(3) * sin(theta / 2) / sqrt(2 + sqrt2)];\n}\n\nmtFlatPolarQuarticRaw.invert = function (x, y) {\n  var sinTheta_2 = y * sqrt(2 + sqrt2) / (2 * sqrt(3)),\n      theta = 2 * asin(sinTheta_2);\n  return [3 * sqrt2 * x / (1 + 2 * cos(theta) / cos(theta / 2)), asin((sinTheta_2 + sin(theta)) / (1 + sqrt1_2))];\n};\n\nexport default function () {\n  return projection(mtFlatPolarQuarticRaw).scale(188.209);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, halfPi, pi, sin, sqrt } from \"./math.js\";\nexport function mtFlatPolarSinusoidalRaw(lambda, phi) {\n  var A = sqrt(6 / (4 + pi)),\n      k = (1 + pi / 4) * sin(phi),\n      theta = phi / 2;\n\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n\n  return [A * (0.5 + cos(theta)) * lambda / 1.5, A * theta];\n}\n\nmtFlatPolarSinusoidalRaw.invert = function (x, y) {\n  var A = sqrt(6 / (4 + pi)),\n      theta = y / A;\n  if (abs(abs(theta) - halfPi) < epsilon) theta = theta < 0 ? -halfPi : halfPi;\n  return [1.5 * x / (A * (0.5 + cos(theta))), asin((theta / 2 + sin(theta)) / (1 + pi / 4))];\n};\n\nexport default function () {\n  return projection(mtFlatPolarSinusoidalRaw).scale(166.518);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, epsilon2 } from \"./math.js\";\nexport function naturalEarth2Raw(lambda, phi) {\n  var phi2 = phi * phi,\n      phi4 = phi2 * phi2,\n      phi6 = phi2 * phi4;\n  return [lambda * (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)), phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4))];\n}\n\nnaturalEarth2Raw.invert = function (x, y) {\n  var phi = y,\n      i = 25,\n      delta,\n      phi2,\n      phi4,\n      phi6;\n\n  do {\n    phi2 = phi * phi;\n    phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4)) - y) / (1.01183 + phi4 * phi4 * (9 * -0.02625 + 11 * 0.01926 * phi2 + 13 * -0.00396 * phi4));\n  } while (abs(delta) > epsilon2 && --i > 0);\n\n  phi2 = phi * phi;\n  phi4 = phi2 * phi2;\n  phi6 = phi2 * phi4;\n  return [x / (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)), phi];\n};\n\nexport default function () {\n  return projection(naturalEarth2Raw).scale(175.295);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, cos, epsilon, tan } from \"./math.js\";\nexport function nellHammerRaw(lambda, phi) {\n  return [lambda * (1 + cos(phi)) / 2, 2 * (phi - tan(phi / 2))];\n}\n\nnellHammerRaw.invert = function (x, y) {\n  var p = y / 2;\n\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; ++i) {\n    var c = cos(y / 2);\n    y -= delta = (y - tan(y / 2) - p) / (1 - 0.5 / (c * c));\n  }\n\n  return [2 * x / (1 + cos(y)), y];\n};\n\nexport default function () {\n  return projection(nellHammerRaw).scale(152.63);\n}","import { hammerRaw } from \"../hammer.js\";\nimport interrupt from \"./index.js\";\nvar lobes = [[// northern hemisphere\n[[-180, 0], [-90, 90], [0, 0]], [[0, 0], [90, 90], [180, 0]]], [// southern hemisphere\n[[-180, 0], [-90, -90], [0, 0]], [[0, 0], [90, -90], [180, 0]]]];\nexport default function () {\n  return interrupt(hammerRaw(Infinity), lobes).rotate([20, 0]).scale(152.63);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, cos, halfPi, pi, sign, sin, sqrt } from \"./math.js\";\nimport { solve } from \"./newton.js\"; // Based on Torben Jansen's implementation\n// https://beta.observablehq.com/@toja/nicolosi-globular-projection\n// https://beta.observablehq.com/@toja/nicolosi-globular-inverse\n\nexport function nicolosiRaw(lambda, phi) {\n  var sinPhi = sin(phi),\n      q = cos(phi),\n      s = sign(lambda);\n  if (lambda === 0 || abs(phi) === halfPi) return [0, phi];else if (phi === 0) return [lambda, 0];else if (abs(lambda) === halfPi) return [lambda * q, halfPi * sinPhi];\n  var b = pi / (2 * lambda) - 2 * lambda / pi,\n      c = 2 * phi / pi,\n      d = (1 - c * c) / (sinPhi - c);\n  var b2 = b * b,\n      d2 = d * d,\n      b2d2 = 1 + b2 / d2,\n      d2b2 = 1 + d2 / b2;\n  var M = (b * sinPhi / d - b / 2) / b2d2,\n      N = (d2 * sinPhi / b2 + d / 2) / d2b2,\n      m = M * M + q * q / b2d2,\n      n = N * N - (d2 * sinPhi * sinPhi / b2 + d * sinPhi - 1) / d2b2;\n  return [halfPi * (M + sqrt(m) * s), halfPi * (N + sqrt(n < 0 ? 0 : n) * sign(-phi * b) * s)];\n}\n\nnicolosiRaw.invert = function (x, y) {\n  x /= halfPi;\n  y /= halfPi;\n  var x2 = x * x,\n      y2 = y * y,\n      x2y2 = x2 + y2,\n      pi2 = pi * pi;\n  return [x ? (x2y2 - 1 + sqrt((1 - x2y2) * (1 - x2y2) + 4 * x2)) / (2 * x) * halfPi : 0, solve(function (phi) {\n    return x2y2 * (pi * sin(phi) - 2 * phi) * pi + 4 * phi * phi * (y - sin(phi)) + 2 * pi * phi - pi2 * y;\n  }, 0)];\n};\n\nexport default function () {\n  return projection(nicolosiRaw).scale(127.267);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, epsilon } from \"./math.js\"; // Based on Java implementation by Bojan Savric.\n// https://github.com/OSUCartography/JMapProjLib/blob/master/src/com/jhlabs/map/proj/PattersonProjection.java\n\nvar pattersonK1 = 1.0148,\n    pattersonK2 = 0.23185,\n    pattersonK3 = -0.14499,\n    pattersonK4 = 0.02406,\n    pattersonC1 = pattersonK1,\n    pattersonC2 = 5 * pattersonK2,\n    pattersonC3 = 7 * pattersonK3,\n    pattersonC4 = 9 * pattersonK4,\n    pattersonYmax = 1.790857183;\nexport function pattersonRaw(lambda, phi) {\n  var phi2 = phi * phi;\n  return [lambda, phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))];\n}\n\npattersonRaw.invert = function (x, y) {\n  if (y > pattersonYmax) y = pattersonYmax;else if (y < -pattersonYmax) y = -pattersonYmax;\n  var yc = y,\n      delta;\n\n  do {\n    // Newton-Raphson\n    var y2 = yc * yc;\n    yc -= delta = (yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));\n  } while (abs(delta) > epsilon);\n\n  return [x, yc];\n};\n\nexport default function () {\n  return projection(pattersonRaw).scale(139.319);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, acos, asin, cos, epsilon, halfPi, sign, sin, tan } from \"./math.js\";\nexport function polyconicRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var tanPhi = tan(phi),\n      k = lambda * sin(phi);\n  return [sin(k) / tanPhi, phi + (1 - cos(k)) / tanPhi];\n}\n\npolyconicRaw.invert = function (x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  var k = x * x + y * y,\n      phi = y * 0.5,\n      i = 10,\n      delta;\n\n  do {\n    var tanPhi = tan(phi),\n        secPhi = 1 / cos(phi),\n        j = k - 2 * y * phi + phi * phi;\n    phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n  } while (abs(delta) > epsilon && --i > 0);\n\n  tanPhi = tan(phi);\n  return [(abs(y) < abs(phi + 1 / tanPhi) ? asin(x * tanPhi) : sign(y) * sign(x) * (acos(abs(x * tanPhi)) + halfPi)) / sin(phi), phi];\n};\n\nexport default function () {\n  return projection(polyconicRaw).scale(103.74);\n}","import { atan2, cos, sin, sqrt } from \"../math.js\"; // Note: 6-element arrays are used to denote the 3x3 affine transform matrix:\n// [a, b, c,\n//  d, e, f,\n//  0, 0, 1] - this redundant row is left out.\n// Transform matrix for [a0, a1] -> [b0, b1].\n\nexport default function (a, b) {\n  var u = subtract(a[1], a[0]),\n      v = subtract(b[1], b[0]),\n      phi = angle(u, v),\n      s = length(u) / length(v);\n  return multiply([1, 0, a[0][0], 0, 1, a[0][1]], multiply([s, 0, 0, 0, s, 0], multiply([cos(phi), sin(phi), 0, -sin(phi), cos(phi), 0], [1, 0, -b[0][0], 0, 1, -b[0][1]])));\n} // Inverts a transform matrix.\n\nexport function inverse(m) {\n  var k = 1 / (m[0] * m[4] - m[1] * m[3]);\n  return [k * m[4], -k * m[1], k * (m[1] * m[5] - m[2] * m[4]), -k * m[3], k * m[0], k * (m[2] * m[3] - m[0] * m[5])];\n} // Multiplies two 3x2 matrices.\n\nexport function multiply(a, b) {\n  return [a[0] * b[0] + a[1] * b[3], a[0] * b[1] + a[1] * b[4], a[0] * b[2] + a[1] * b[5] + a[2], a[3] * b[0] + a[4] * b[3], a[3] * b[1] + a[4] * b[4], a[3] * b[2] + a[4] * b[5] + a[5]];\n} // Subtracts 2D vectors.\n\nfunction subtract(a, b) {\n  return [a[0] - b[0], a[1] - b[1]];\n} // Magnitude of a 2D vector.\n\n\nfunction length(v) {\n  return sqrt(v[0] * v[0] + v[1] * v[1]);\n} // Angle between two 2D vectors.\n\n\nfunction angle(a, b) {\n  return atan2(a[0] * b[1] - a[1] * b[0], a[0] * b[0] + a[1] * b[1]);\n}","import { geoBounds as bounds, geoCentroid as centroid, geoInterpolate as interpolate, geoProjection as projection } from \"d3-geo\";\nimport { abs, degrees, epsilon, radians } from \"../math.js\";\nimport { default as matrix, multiply, inverse } from \"./matrix.js\"; // Creates a polyhedral projection.\n//  * root: a spanning tree of polygon faces.  Nodes are automatically\n//    augmented with a transform matrix.\n//  * face: a function that returns the appropriate node for a given {lambda, phi}\n//    point (radians).\n//  * r: rotation angle for root face [deprecated by .angle()].\n\nexport default function (root, face, r) {\n  recurse(root, {\n    transform: null\n  });\n\n  function recurse(node, parent) {\n    node.edges = faceEdges(node.face); // Find shared edge.\n\n    if (parent.face) {\n      var shared = node.shared = sharedEdge(node.face, parent.face),\n          m = matrix(shared.map(parent.project), shared.map(node.project));\n      node.transform = parent.transform ? multiply(parent.transform, m) : m; // Replace shared edge in parent edges array.\n\n      var edges = parent.edges;\n\n      for (var i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = node;\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = node;\n      }\n\n      edges = node.edges;\n\n      for (i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = parent;\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = parent;\n      }\n    } else {\n      node.transform = parent.transform;\n    }\n\n    if (node.children) {\n      node.children.forEach(function (child) {\n        recurse(child, node);\n      });\n    }\n\n    return node;\n  }\n\n  function forward(lambda, phi) {\n    var node = face(lambda, phi),\n        point = node.project([lambda * degrees, phi * degrees]),\n        t;\n\n    if (t = node.transform) {\n      return [t[0] * point[0] + t[1] * point[1] + t[2], -(t[3] * point[0] + t[4] * point[1] + t[5])];\n    }\n\n    point[1] = -point[1];\n    return point;\n  } // Naive inverse!  A faster solution would use bounding boxes, or even a\n  // polygonal quadtree.\n\n\n  if (hasInverse(root)) forward.invert = function (x, y) {\n    var coordinates = faceInvert(root, [x, -y]);\n    return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);\n  };\n\n  function faceInvert(node, coordinates) {\n    var invert = node.project.invert,\n        t = node.transform,\n        point = coordinates;\n\n    if (t) {\n      t = inverse(t);\n      point = [t[0] * point[0] + t[1] * point[1] + t[2], t[3] * point[0] + t[4] * point[1] + t[5]];\n    }\n\n    if (invert && node === faceDegrees(p = invert(point))) return p;\n    var p,\n        children = node.children;\n\n    for (var i = 0, n = children && children.length; i < n; ++i) {\n      if (p = faceInvert(children[i], coordinates)) return p;\n    }\n  }\n\n  function faceDegrees(coordinates) {\n    return face(coordinates[0] * radians, coordinates[1] * radians);\n  }\n\n  var proj = projection(forward),\n      stream_ = proj.stream;\n\n  proj.stream = function (stream) {\n    var rotate = proj.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (proj.rotate([0, 0]), stream_(stream));\n    proj.rotate(rotate);\n\n    rotateStream.sphere = function () {\n      sphereStream.polygonStart();\n      sphereStream.lineStart();\n      outline(sphereStream, root);\n      sphereStream.lineEnd();\n      sphereStream.polygonEnd();\n    };\n\n    return rotateStream;\n  };\n\n  return proj.angle(r == null ? -30 : r * degrees);\n}\n\nfunction outline(stream, node, parent) {\n  var point,\n      edges = node.edges,\n      n = edges.length,\n      edge,\n      multiPoint = {\n    type: \"MultiPoint\",\n    coordinates: node.face\n  },\n      notPoles = node.face.filter(function (d) {\n    return abs(d[1]) !== 90;\n  }),\n      b = bounds({\n    type: \"MultiPoint\",\n    coordinates: notPoles\n  }),\n      inside = false,\n      j = -1,\n      dx = b[1][0] - b[0][0]; // TODO\n\n  var c = dx === 180 || dx === 360 ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2] : centroid(multiPoint); // First find the shared edge…\n\n  if (parent) while (++j < n) {\n    if (edges[j] === parent) break;\n  }\n  ++j;\n\n  for (var i = 0; i < n; ++i) {\n    edge = edges[(i + j) % n];\n\n    if (Array.isArray(edge)) {\n      if (!inside) {\n        stream.point((point = interpolate(edge[0], c)(epsilon))[0], point[1]);\n        inside = true;\n      }\n\n      stream.point((point = interpolate(edge[1], c)(epsilon))[0], point[1]);\n    } else {\n      inside = false;\n      if (edge !== parent) outline(stream, edge, node);\n    }\n  }\n} // Tests equality of two spherical points.\n\n\nfunction pointEqual(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1];\n} // Finds a shared edge given two clockwise polygons.\n\n\nfunction sharedEdge(a, b) {\n  var x,\n      y,\n      n = a.length,\n      found = null;\n\n  for (var i = 0; i < n; ++i) {\n    x = a[i];\n\n    for (var j = b.length; --j >= 0;) {\n      y = b[j];\n\n      if (x[0] === y[0] && x[1] === y[1]) {\n        if (found) return [found, x];\n        found = x;\n      }\n    }\n  }\n} // Converts an array of n face vertices to an array of n + 1 edges.\n\n\nfunction faceEdges(face) {\n  var n = face.length,\n      edges = [];\n\n  for (var a = face[n - 1], i = 0; i < n; ++i) {\n    edges.push([a, a = face[i]]);\n  }\n\n  return edges;\n}\n\nfunction hasInverse(node) {\n  return node.project.invert || node.children && node.children.some(hasInverse);\n}","// TODO generate on-the-fly to avoid external modification.\nvar octahedron = [[0, 90], [-90, 0], [0, 0], [90, 0], [180, 0], [0, -90]];\nexport default [[0, 2, 1], [0, 3, 2], [5, 1, 2], [5, 2, 3], [0, 1, 4], [0, 4, 3], [5, 4, 1], [5, 3, 4]].map(function (face) {\n  return face.map(function (i) {\n    return octahedron[i];\n  });\n});","import { geoCentroid as centroid, geoGnomonic as gnomonic } from \"d3-geo\";\nimport { pi } from \"../math.js\";\nimport polyhedral from \"./index.js\";\nimport octahedron from \"./octahedron.js\";\nexport default function (faceProjection) {\n  faceProjection = faceProjection || function (face) {\n    var c = centroid({\n      type: \"MultiPoint\",\n      coordinates: face\n    });\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var faces = octahedron.map(function (face) {\n    return {\n      face: face,\n      project: faceProjection(face)\n    };\n  });\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function (d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n  return polyhedral(faces[0], function (lambda, phi) {\n    return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4 : lambda < 0 ? phi < 0 ? 2 : 0 : lambda < pi / 2 ? phi < 0 ? 3 : 1 : phi < 0 ? 7 : 5];\n  }).angle(-30).scale(101.858).center([0, 45]);\n}","import { geoCentroid as centroid, geoProjection as projection } from \"d3-geo\";\nimport { collignonRaw } from \"../collignon.js\";\nimport { pi, sqrt } from \"../math.js\";\nimport polyhedral from \"./index.js\";\nimport octahedron from \"./octahedron.js\";\nvar kx = 2 / sqrt(3);\n\nfunction collignonK(a, b) {\n  var p = collignonRaw(a, b);\n  return [p[0] * kx, p[1]];\n}\n\ncollignonK.invert = function (x, y) {\n  return collignonRaw.invert(x / kx, y);\n};\n\nexport default function (faceProjection) {\n  faceProjection = faceProjection || function (face) {\n    var c = centroid({\n      type: \"MultiPoint\",\n      coordinates: face\n    });\n    return projection(collignonK).translate([0, 0]).scale(1).rotate(c[1] > 0 ? [-c[0], 0] : [180 - c[0], 180]);\n  };\n\n  var faces = octahedron.map(function (face) {\n    return {\n      face: face,\n      project: faceProjection(face)\n    };\n  });\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function (d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n  return polyhedral(faces[0], function (lambda, phi) {\n    return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4 : lambda < 0 ? phi < 0 ? 2 : 0 : lambda < pi / 2 ? phi < 0 ? 3 : 1 : phi < 0 ? 7 : 5];\n  }).angle(-30).scale(121.906).center([0, 48.5904]);\n}","import { geoCentroid as centroid, geoGnomonic as gnomonic } from \"d3-geo\";\nimport { asin, atan2, cos, degrees, max, min, pi, radians, sin } from \"../math.js\";\nimport polyhedral from \"./index.js\";\nimport octahedron from \"./octahedron.js\";\nexport default function (faceProjection) {\n  faceProjection = faceProjection || function (face) {\n    var c = face.length === 6 ? centroid({\n      type: \"MultiPoint\",\n      coordinates: face\n    }) : face[0];\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var w5 = octahedron.map(function (face) {\n    var xyz = face.map(cartesian),\n        n = xyz.length,\n        a = xyz[n - 1],\n        b,\n        hexagon = [];\n\n    for (var i = 0; i < n; ++i) {\n      b = xyz[i];\n      hexagon.push(spherical([a[0] * 0.9486832980505138 + b[0] * 0.31622776601683794, a[1] * 0.9486832980505138 + b[1] * 0.31622776601683794, a[2] * 0.9486832980505138 + b[2] * 0.31622776601683794]), spherical([b[0] * 0.9486832980505138 + a[0] * 0.31622776601683794, b[1] * 0.9486832980505138 + a[1] * 0.31622776601683794, b[2] * 0.9486832980505138 + a[2] * 0.31622776601683794]));\n      a = b;\n    }\n\n    return hexagon;\n  });\n  var cornerNormals = [];\n  var parents = [-1, 0, 0, 1, 0, 1, 4, 5];\n  w5.forEach(function (hexagon, j) {\n    var face = octahedron[j],\n        n = face.length,\n        normals = cornerNormals[j] = [];\n\n    for (var i = 0; i < n; ++i) {\n      w5.push([face[i], hexagon[(i * 2 + 2) % (2 * n)], hexagon[(i * 2 + 1) % (2 * n)]]);\n      parents.push(j);\n      normals.push(cross(cartesian(hexagon[(i * 2 + 2) % (2 * n)]), cartesian(hexagon[(i * 2 + 1) % (2 * n)])));\n    }\n  });\n  var faces = w5.map(function (face) {\n    return {\n      project: faceProjection(face),\n      face: face\n    };\n  });\n  parents.forEach(function (d, i) {\n    var parent = faces[d];\n    parent && (parent.children || (parent.children = [])).push(faces[i]);\n  });\n\n  function face(lambda, phi) {\n    var cosphi = cos(phi),\n        p = [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n    var hexagon = lambda < -pi / 2 ? phi < 0 ? 6 : 4 : lambda < 0 ? phi < 0 ? 2 : 0 : lambda < pi / 2 ? phi < 0 ? 3 : 1 : phi < 0 ? 7 : 5;\n    var n = cornerNormals[hexagon];\n    return faces[dot(n[0], p) < 0 ? 8 + 3 * hexagon : dot(n[1], p) < 0 ? 8 + 3 * hexagon + 1 : dot(n[2], p) < 0 ? 8 + 3 * hexagon + 2 : hexagon];\n  }\n\n  return polyhedral(faces[0], face).angle(-30).scale(110.625).center([0, 45]);\n}\n\nfunction dot(a, b) {\n  for (var i = 0, n = a.length, s = 0; i < n; ++i) {\n    s += a[i] * b[i];\n  }\n\n  return s;\n}\n\nfunction cross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n} // Converts 3D Cartesian to spherical coordinates (degrees).\n\n\nfunction spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]) * degrees, asin(max(-1, min(1, cartesian[2]))) * degrees];\n} // Converts spherical coordinates (degrees) to 3D Cartesian.\n\n\nfunction cartesian(coordinates) {\n  var lambda = coordinates[0] * radians,\n      phi = coordinates[1] * radians,\n      cosphi = cos(phi);\n  return [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n}","export default function () {}","import { geoStream } from \"d3-geo\";\nimport noop from \"../noop.js\";\nimport clockwise from \"./clockwise.js\";\nimport contains from \"./contains.js\";\nexport default function (object, projection) {\n  var stream = projection.stream,\n      project;\n  if (!stream) throw new Error(\"invalid projection\");\n\n  switch (object && object.type) {\n    case \"Feature\":\n      project = projectFeature;\n      break;\n\n    case \"FeatureCollection\":\n      project = projectFeatureCollection;\n      break;\n\n    default:\n      project = projectGeometry;\n      break;\n  }\n\n  return project(object, stream);\n}\n\nfunction projectFeatureCollection(o, stream) {\n  return {\n    type: \"FeatureCollection\",\n    features: o.features.map(function (f) {\n      return projectFeature(f, stream);\n    })\n  };\n}\n\nfunction projectFeature(o, stream) {\n  return {\n    type: \"Feature\",\n    id: o.id,\n    properties: o.properties,\n    geometry: projectGeometry(o.geometry, stream)\n  };\n}\n\nfunction projectGeometryCollection(o, stream) {\n  return {\n    type: \"GeometryCollection\",\n    geometries: o.geometries.map(function (o) {\n      return projectGeometry(o, stream);\n    })\n  };\n}\n\nfunction projectGeometry(o, stream) {\n  if (!o) return null;\n  if (o.type === \"GeometryCollection\") return projectGeometryCollection(o, stream);\n  var sink;\n\n  switch (o.type) {\n    case \"Point\":\n      sink = sinkPoint;\n      break;\n\n    case \"MultiPoint\":\n      sink = sinkPoint;\n      break;\n\n    case \"LineString\":\n      sink = sinkLine;\n      break;\n\n    case \"MultiLineString\":\n      sink = sinkLine;\n      break;\n\n    case \"Polygon\":\n      sink = sinkPolygon;\n      break;\n\n    case \"MultiPolygon\":\n      sink = sinkPolygon;\n      break;\n\n    case \"Sphere\":\n      sink = sinkPolygon;\n      break;\n\n    default:\n      return null;\n  }\n\n  geoStream(o, stream(sink));\n  return sink.result();\n}\n\nvar points = [],\n    lines = [];\nvar sinkPoint = {\n  point: function point(x, y) {\n    points.push([x, y]);\n  },\n  result: function result() {\n    var result = !points.length ? null : points.length < 2 ? {\n      type: \"Point\",\n      coordinates: points[0]\n    } : {\n      type: \"MultiPoint\",\n      coordinates: points\n    };\n    points = [];\n    return result;\n  }\n};\nvar sinkLine = {\n  lineStart: noop,\n  point: function point(x, y) {\n    points.push([x, y]);\n  },\n  lineEnd: function lineEnd() {\n    if (points.length) lines.push(points), points = [];\n  },\n  result: function result() {\n    var result = !lines.length ? null : lines.length < 2 ? {\n      type: \"LineString\",\n      coordinates: lines[0]\n    } : {\n      type: \"MultiLineString\",\n      coordinates: lines\n    };\n    lines = [];\n    return result;\n  }\n};\nvar sinkPolygon = {\n  polygonStart: noop,\n  lineStart: noop,\n  point: function point(x, y) {\n    points.push([x, y]);\n  },\n  lineEnd: function lineEnd() {\n    var n = points.length;\n\n    if (n) {\n      do {\n        points.push(points[0].slice());\n      } while (++n < 4);\n\n      lines.push(points), points = [];\n    }\n  },\n  polygonEnd: noop,\n  result: function result() {\n    if (!lines.length) return null;\n    var polygons = [],\n        holes = []; // https://github.com/d3/d3/issues/1558\n\n    lines.forEach(function (ring) {\n      if (clockwise(ring)) polygons.push([ring]);else holes.push(ring);\n    });\n    holes.forEach(function (hole) {\n      var point = hole[0];\n      polygons.some(function (polygon) {\n        if (contains(polygon[0], point)) {\n          polygon.push(hole);\n          return true;\n        }\n      }) || polygons.push([hole]);\n    });\n    lines = [];\n    return !polygons.length ? null : polygons.length > 1 ? {\n      type: \"MultiPolygon\",\n      coordinates: polygons\n    } : {\n      type: \"Polygon\",\n      coordinates: polygons[0]\n    };\n  }\n};","export default function (ring) {\n  if ((n = ring.length) < 4) return false;\n  var i = 0,\n      n,\n      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\n\n  while (++i < n) {\n    area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\n  }\n\n  return area <= 0;\n}","export default function (ring, point) {\n  var x = point[0],\n      y = point[1],\n      contains = false;\n\n  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\n    var pi = ring[i],\n        xi = pi[0],\n        yi = pi[1],\n        pj = ring[j],\n        xj = pj[0],\n        yj = pj[1];\n    if (yi > y ^ yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = !contains;\n  }\n\n  return contains;\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, halfPi, pi, sign, sqrt1_2 } from \"../math.js\";\nexport default function (project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectQuincuncial(lambda, phi) {\n    var t = abs(lambda) < halfPi,\n        p = project(t ? lambda : lambda > 0 ? lambda - pi : lambda + pi, phi),\n        x = (p[0] - p[1]) * sqrt1_2,\n        y = (p[0] + p[1]) * sqrt1_2;\n    if (t) return [x, y];\n    var d = dx * sqrt1_2,\n        s = x > 0 ^ y > 0 ? -1 : 1;\n    return [s * x - sign(y) * d, s * y - sign(x) * d];\n  }\n\n  if (project.invert) projectQuincuncial.invert = function (x0, y0) {\n    var x = (x0 + y0) * sqrt1_2,\n        y = (y0 - x0) * sqrt1_2,\n        t = abs(x) < 0.5 * dx && abs(y) < 0.5 * dx;\n\n    if (!t) {\n      var d = dx * sqrt1_2,\n          s = x > 0 ^ y > 0 ? -1 : 1,\n          x1 = -s * x0 + (y > 0 ? 1 : -1) * d,\n          y1 = -s * y0 + (x > 0 ? 1 : -1) * d;\n      x = (-x1 - y1) * sqrt1_2;\n      y = (x1 - y1) * sqrt1_2;\n    }\n\n    var p = project.invert(x, y);\n    if (!t) p[0] += x > 0 ? pi : -pi;\n    return p;\n  };\n  return projection(projectQuincuncial).rotate([-90, -90, 45]).clipAngle(180 - 1e-3);\n}","import { gringortenRaw } from \"../gringorten.js\";\nimport quincuncial from \"./index.js\";\nexport default function () {\n  return quincuncial(gringortenRaw).scale(176.423);\n}","import { guyouRaw } from \"../guyou.js\";\nimport quincuncial from \"./index.js\";\nexport default function () {\n  return quincuncial(guyouRaw).scale(111.48);\n}","export default function (input, digits) {\n  if (!(0 <= (digits = +digits) && digits <= 20)) throw new Error(\"invalid digits\");\n\n  function quantizePoint(input) {\n    var n = input.length,\n        i = 2,\n        output = new Array(n);\n    output[0] = +input[0].toFixed(digits);\n    output[1] = +input[1].toFixed(digits);\n\n    while (i < n) {\n      output[i] = input[i], ++i;\n    }\n\n    return output;\n  }\n\n  function quantizePoints(input) {\n    return input.map(quantizePoint);\n  }\n\n  function quantizePointsNoDuplicates(input) {\n    var point0 = quantizePoint(input[0]);\n    var output = [point0];\n\n    for (var i = 1; i < input.length; i++) {\n      var point = quantizePoint(input[i]);\n\n      if (point.length > 2 || point[0] != point0[0] || point[1] != point0[1]) {\n        output.push(point);\n        point0 = point;\n      }\n    }\n\n    if (output.length === 1 && input.length > 1) {\n      output.push(quantizePoint(input[input.length - 1]));\n    }\n\n    return output;\n  }\n\n  function quantizePolygon(input) {\n    return input.map(quantizePointsNoDuplicates);\n  }\n\n  function quantizeGeometry(input) {\n    if (input == null) return input;\n    var output;\n\n    switch (input.type) {\n      case \"GeometryCollection\":\n        output = {\n          type: \"GeometryCollection\",\n          geometries: input.geometries.map(quantizeGeometry)\n        };\n        break;\n\n      case \"Point\":\n        output = {\n          type: \"Point\",\n          coordinates: quantizePoint(input.coordinates)\n        };\n        break;\n\n      case \"MultiPoint\":\n        output = {\n          type: input.type,\n          coordinates: quantizePoints(input.coordinates)\n        };\n        break;\n\n      case \"LineString\":\n        output = {\n          type: input.type,\n          coordinates: quantizePointsNoDuplicates(input.coordinates)\n        };\n        break;\n\n      case \"MultiLineString\":\n      case \"Polygon\":\n        output = {\n          type: input.type,\n          coordinates: quantizePolygon(input.coordinates)\n        };\n        break;\n\n      case \"MultiPolygon\":\n        output = {\n          type: \"MultiPolygon\",\n          coordinates: input.coordinates.map(quantizePolygon)\n        };\n        break;\n\n      default:\n        return input;\n    }\n\n    if (input.bbox != null) output.bbox = input.bbox;\n    return output;\n  }\n\n  function quantizeFeature(input) {\n    var output = {\n      type: \"Feature\",\n      properties: input.properties,\n      geometry: quantizeGeometry(input.geometry)\n    };\n    if (input.id != null) output.id = input.id;\n    if (input.bbox != null) output.bbox = input.bbox;\n    return output;\n  }\n\n  if (input != null) switch (input.type) {\n    case \"Feature\":\n      return quantizeFeature(input);\n\n    case \"FeatureCollection\":\n      {\n        var output = {\n          type: \"FeatureCollection\",\n          features: input.features.map(quantizeFeature)\n        };\n        if (input.bbox != null) output.bbox = input.bbox;\n        return output;\n      }\n\n    default:\n      return quantizeGeometry(input);\n  }\n  return input;\n}","import { abs, acos, asin, atan, cos, epsilon, pi, sin, tan } from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\nexport function rectangularPolyconicRaw(phi0) {\n  var sinPhi0 = sin(phi0);\n\n  function forward(lambda, phi) {\n    var A = sinPhi0 ? tan(lambda * sinPhi0 / 2) / sinPhi0 : lambda / 2;\n    if (!phi) return [2 * A, -phi0];\n    var E = 2 * atan(A * sin(phi)),\n        cotPhi = 1 / tan(phi);\n    return [sin(E) * cotPhi, phi + (1 - cos(E)) * cotPhi - phi0];\n  } // TODO return null for points outside outline.\n\n\n  forward.invert = function (x, y) {\n    if (abs(y += phi0) < epsilon) return [sinPhi0 ? 2 * atan(sinPhi0 * x / 2) / sinPhi0 : x, 0];\n    var k = x * x + y * y,\n        phi = 0,\n        i = 10,\n        delta;\n\n    do {\n      var tanPhi = tan(phi),\n          secPhi = 1 / cos(phi),\n          j = k - 2 * y * phi + phi * phi;\n      phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n    } while (abs(delta) > epsilon && --i > 0);\n\n    var E = x * (tanPhi = tan(phi)),\n        A = tan(abs(y) < abs(phi + 1 / tanPhi) ? asin(E) * 0.5 : acos(E) * 0.5 + pi / 4) / sin(phi);\n    return [sinPhi0 ? 2 * atan(sinPhi0 * A) / sinPhi0 : 2 * A, phi];\n  };\n\n  return forward;\n}\nexport default function () {\n  return parallel1(rectangularPolyconicRaw).scale(131.215);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, degrees, epsilon2, floor, halfPi, max, min, pi, radians } from \"./math.js\";\nvar K = [[0.9986, -0.062], [1.0000, 0.0000], [0.9986, 0.0620], [0.9954, 0.1240], [0.9900, 0.1860], [0.9822, 0.2480], [0.9730, 0.3100], [0.9600, 0.3720], [0.9427, 0.4340], [0.9216, 0.4958], [0.8962, 0.5571], [0.8679, 0.6176], [0.8350, 0.6769], [0.7986, 0.7346], [0.7597, 0.7903], [0.7186, 0.8435], [0.6732, 0.8936], [0.6213, 0.9394], [0.5722, 0.9761], [0.5322, 1.0000]];\nK.forEach(function (d) {\n  d[1] *= 1.0144;\n});\nexport function robinsonRaw(lambda, phi) {\n  var i = min(18, abs(phi) * 36 / pi),\n      i0 = floor(i),\n      di = i - i0,\n      ax = (k = K[i0])[0],\n      ay = k[1],\n      bx = (k = K[++i0])[0],\n      by = k[1],\n      cx = (k = K[min(19, ++i0)])[0],\n      cy = k[1],\n      k;\n  return [lambda * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2), (phi > 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)];\n}\n\nrobinsonRaw.invert = function (x, y) {\n  var yy = y / halfPi,\n      phi = yy * 90,\n      i = min(18, abs(phi / 5)),\n      i0 = max(0, floor(i));\n\n  do {\n    var ay = K[i0][1],\n        by = K[i0 + 1][1],\n        cy = K[min(19, i0 + 2)][1],\n        u = cy - ay,\n        v = cy - 2 * by + ay,\n        t = 2 * (abs(yy) - by) / u,\n        c = v / u,\n        di = t * (1 - c * t * (1 - 2 * c * t));\n\n    if (di >= 0 || i0 === 1) {\n      phi = (y >= 0 ? 5 : -5) * (di + i);\n      var j = 50,\n          delta;\n\n      do {\n        i = min(18, abs(phi) / 5);\n        i0 = floor(i);\n        di = i - i0;\n        ay = K[i0][1];\n        by = K[i0 + 1][1];\n        cy = K[min(19, i0 + 2)][1];\n        phi -= (delta = (y >= 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * degrees;\n      } while (abs(delta) > epsilon2 && --j > 0);\n\n      break;\n    }\n  } while (--i0 >= 0);\n\n  var ax = K[i0][0],\n      bx = K[i0 + 1][0],\n      cx = K[min(19, i0 + 2)][0];\n  return [x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2), phi * radians];\n};\n\nexport default function () {\n  return projection(robinsonRaw).scale(152.63);\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { acos, asin, atan2, cos, degrees, radians, sin, sqrt } from \"./math.js\";\n\nfunction satelliteVerticalRaw(P) {\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = (P - 1) / (P - cosPhi * cos(lambda));\n    return [k * cosPhi * sin(lambda), k * sin(phi)];\n  }\n\n  forward.invert = function (x, y) {\n    var rho2 = x * x + y * y,\n        rho = sqrt(rho2),\n        sinc = (P - sqrt(1 - rho2 * (P + 1) / (P - 1))) / ((P - 1) / rho + rho / (P - 1));\n    return [atan2(x * sinc, rho * sqrt(1 - sinc * sinc)), rho ? asin(y * sinc / rho) : 0];\n  };\n\n  return forward;\n}\n\nexport function satelliteRaw(P, omega) {\n  var vertical = satelliteVerticalRaw(P);\n  if (!omega) return vertical;\n  var cosOmega = cos(omega),\n      sinOmega = sin(omega);\n\n  function forward(lambda, phi) {\n    var coordinates = vertical(lambda, phi),\n        y = coordinates[1],\n        A = y * sinOmega / (P - 1) + cosOmega;\n    return [coordinates[0] * cosOmega / A, y / A];\n  }\n\n  forward.invert = function (x, y) {\n    var k = (P - 1) / (P - 1 - y * sinOmega);\n    return vertical.invert(k * x, k * y * cosOmega);\n  };\n\n  return forward;\n}\nexport default function () {\n  var distance = 2,\n      omega = 0,\n      m = projectionMutator(satelliteRaw),\n      p = m(distance, omega); // As a multiple of radius.\n\n  p.distance = function (_) {\n    if (!arguments.length) return distance;\n    return m(distance = +_, omega);\n  };\n\n  p.tilt = function (_) {\n    if (!arguments.length) return omega * degrees;\n    return m(distance, omega = _ * radians);\n  };\n\n  return p.scale(432.147).clipAngle(acos(1 / distance) * degrees - 1e-6);\n}","var epsilon = 1e-4,\n    epsilonInverse = 1e4,\n    x0 = -180,\n    x0e = x0 + epsilon,\n    x1 = 180,\n    x1e = x1 - epsilon,\n    y0 = -90,\n    y0e = y0 + epsilon,\n    y1 = 90,\n    y1e = y1 - epsilon;\n\nfunction nonempty(coordinates) {\n  return coordinates.length > 0;\n}\n\nfunction quantize(x) {\n  return Math.floor(x * epsilonInverse) / epsilonInverse;\n}\n\nfunction normalizePoint(y) {\n  return y === y0 || y === y1 ? [0, y] : [x0, quantize(y)]; // pole or antimeridian?\n}\n\nfunction clampPoint(p) {\n  var x = p[0],\n      y = p[1],\n      clamped = false;\n  if (x <= x0e) x = x0, clamped = true;else if (x >= x1e) x = x1, clamped = true;\n  if (y <= y0e) y = y0, clamped = true;else if (y >= y1e) y = y1, clamped = true;\n  return clamped ? [x, y] : p;\n}\n\nfunction clampPoints(points) {\n  return points.map(clampPoint);\n} // For each ring, detect where it crosses the antimeridian or pole.\n\n\nfunction extractFragments(rings, polygon, fragments) {\n  for (var j = 0, m = rings.length; j < m; ++j) {\n    var ring = rings[j].slice(); // By default, assume that this ring doesn’t need any stitching.\n\n    fragments.push({\n      index: -1,\n      polygon: polygon,\n      ring: ring\n    });\n\n    for (var i = 0, n = ring.length; i < n; ++i) {\n      var point = ring[i],\n          x = point[0],\n          y = point[1]; // If this is an antimeridian or polar point…\n\n      if (x <= x0e || x >= x1e || y <= y0e || y >= y1e) {\n        ring[i] = clampPoint(point); // Advance through any antimeridian or polar points…\n\n        for (var k = i + 1; k < n; ++k) {\n          var pointk = ring[k],\n              xk = pointk[0],\n              yk = pointk[1];\n          if (xk > x0e && xk < x1e && yk > y0e && yk < y1e) break;\n        } // If this was just a single antimeridian or polar point,\n        // we don’t need to cut this ring into a fragment;\n        // we can just leave it as-is.\n\n\n        if (k === i + 1) continue; // Otherwise, if this is not the first point in the ring,\n        // cut the current fragment so that it ends at the current point.\n        // The current point is also normalized for later joining.\n\n        if (i) {\n          var fragmentBefore = {\n            index: -1,\n            polygon: polygon,\n            ring: ring.slice(0, i + 1)\n          };\n          fragmentBefore.ring[fragmentBefore.ring.length - 1] = normalizePoint(y);\n          fragments[fragments.length - 1] = fragmentBefore;\n        } // If the ring started with an antimeridian fragment,\n        // we can ignore that fragment entirely.\n        else fragments.pop(); // If the remainder of the ring is an antimeridian fragment,\n        // move on to the next ring.\n\n\n        if (k >= n) break; // Otherwise, add the remaining ring fragment and continue.\n\n        fragments.push({\n          index: -1,\n          polygon: polygon,\n          ring: ring = ring.slice(k - 1)\n        });\n        ring[0] = normalizePoint(ring[0][1]);\n        i = -1;\n        n = ring.length;\n      }\n    }\n  }\n} // Now stitch the fragments back together into rings.\n\n\nfunction stitchFragments(fragments) {\n  var i,\n      n = fragments.length; // To connect the fragments start-to-end, create a simple index by end.\n\n  var fragmentByStart = {},\n      fragmentByEnd = {},\n      fragment,\n      start,\n      startFragment,\n      end,\n      endFragment; // For each fragment…\n\n  for (i = 0; i < n; ++i) {\n    fragment = fragments[i];\n    start = fragment.ring[0];\n    end = fragment.ring[fragment.ring.length - 1]; // If this fragment is closed, add it as a standalone ring.\n\n    if (start[0] === end[0] && start[1] === end[1]) {\n      fragment.polygon.push(fragment.ring);\n      fragments[i] = null;\n      continue;\n    }\n\n    fragment.index = i;\n    fragmentByStart[start] = fragmentByEnd[end] = fragment;\n  } // For each open fragment…\n\n\n  for (i = 0; i < n; ++i) {\n    fragment = fragments[i];\n\n    if (fragment) {\n      start = fragment.ring[0];\n      end = fragment.ring[fragment.ring.length - 1];\n      startFragment = fragmentByEnd[start];\n      endFragment = fragmentByStart[end];\n      delete fragmentByStart[start];\n      delete fragmentByEnd[end]; // If this fragment is closed, add it as a standalone ring.\n\n      if (start[0] === end[0] && start[1] === end[1]) {\n        fragment.polygon.push(fragment.ring);\n        continue;\n      }\n\n      if (startFragment) {\n        delete fragmentByEnd[start];\n        delete fragmentByStart[startFragment.ring[0]];\n        startFragment.ring.pop(); // drop the shared coordinate\n\n        fragments[startFragment.index] = null;\n        fragment = {\n          index: -1,\n          polygon: startFragment.polygon,\n          ring: startFragment.ring.concat(fragment.ring)\n        };\n\n        if (startFragment === endFragment) {\n          // Connect both ends to this single fragment to create a ring.\n          fragment.polygon.push(fragment.ring);\n        } else {\n          fragment.index = n++;\n          fragments.push(fragmentByStart[fragment.ring[0]] = fragmentByEnd[fragment.ring[fragment.ring.length - 1]] = fragment);\n        }\n      } else if (endFragment) {\n        delete fragmentByStart[end];\n        delete fragmentByEnd[endFragment.ring[endFragment.ring.length - 1]];\n        fragment.ring.pop(); // drop the shared coordinate\n\n        fragment = {\n          index: n++,\n          polygon: endFragment.polygon,\n          ring: fragment.ring.concat(endFragment.ring)\n        };\n        fragments[endFragment.index] = null;\n        fragments.push(fragmentByStart[fragment.ring[0]] = fragmentByEnd[fragment.ring[fragment.ring.length - 1]] = fragment);\n      } else {\n        fragment.ring.push(fragment.ring[0]); // close ring\n\n        fragment.polygon.push(fragment.ring);\n      }\n    }\n  }\n}\n\nfunction stitchFeature(input) {\n  var output = {\n    type: \"Feature\",\n    geometry: stitchGeometry(input.geometry)\n  };\n  if (input.id != null) output.id = input.id;\n  if (input.bbox != null) output.bbox = input.bbox;\n  if (input.properties != null) output.properties = input.properties;\n  return output;\n}\n\nfunction stitchGeometry(input) {\n  if (input == null) return input;\n  var output, fragments, i, n;\n\n  switch (input.type) {\n    case \"GeometryCollection\":\n      output = {\n        type: \"GeometryCollection\",\n        geometries: input.geometries.map(stitchGeometry)\n      };\n      break;\n\n    case \"Point\":\n      output = {\n        type: \"Point\",\n        coordinates: clampPoint(input.coordinates)\n      };\n      break;\n\n    case \"MultiPoint\":\n    case \"LineString\":\n      output = {\n        type: input.type,\n        coordinates: clampPoints(input.coordinates)\n      };\n      break;\n\n    case \"MultiLineString\":\n      output = {\n        type: \"MultiLineString\",\n        coordinates: input.coordinates.map(clampPoints)\n      };\n      break;\n\n    case \"Polygon\":\n      {\n        var polygon = [];\n        extractFragments(input.coordinates, polygon, fragments = []);\n        stitchFragments(fragments);\n        output = {\n          type: \"Polygon\",\n          coordinates: polygon\n        };\n        break;\n      }\n\n    case \"MultiPolygon\":\n      {\n        fragments = [], i = -1, n = input.coordinates.length;\n        var polygons = new Array(n);\n\n        while (++i < n) {\n          extractFragments(input.coordinates[i], polygons[i] = [], fragments);\n        }\n\n        stitchFragments(fragments);\n        output = {\n          type: \"MultiPolygon\",\n          coordinates: polygons.filter(nonempty)\n        };\n        break;\n      }\n\n    default:\n      return input;\n  }\n\n  if (input.bbox != null) output.bbox = input.bbox;\n  return output;\n}\n\nexport default function (input) {\n  if (input == null) return input;\n\n  switch (input.type) {\n    case \"Feature\":\n      return stitchFeature(input);\n\n    case \"FeatureCollection\":\n      {\n        var output = {\n          type: \"FeatureCollection\",\n          features: input.features.map(stitchFeature)\n        };\n        if (input.bbox != null) output.bbox = input.bbox;\n        return output;\n      }\n\n    default:\n      return stitchGeometry(input);\n  }\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { atan, quarterPi, sin, tan } from \"./math.js\";\nexport function timesRaw(lambda, phi) {\n  var t = tan(phi / 2),\n      s = sin(quarterPi * t);\n  return [lambda * (0.74482 - 0.34588 * s * s), 1.70711 * t];\n}\n\ntimesRaw.invert = function (x, y) {\n  var t = y / 1.70711,\n      s = sin(quarterPi * t);\n  return [x / (0.74482 - 0.34588 * s * s), 2 * atan(t)];\n};\n\nexport default function () {\n  return projection(timesRaw).scale(146.153);\n}","import { geoInterpolate as interpolate, geoProjection as projection, geoRotation as rotation } from \"d3-geo\";\nimport { asin, degrees, pi, sin, radians } from \"./math.js\"; // Compute the origin as the midpoint of the two reference points.\n// Rotate one of the reference points by the origin.\n// Apply the spherical law of sines to compute gamma rotation.\n\nexport default function (raw, p0, p1) {\n  var i = interpolate(p0, p1),\n      o = i(0.5),\n      a = rotation([-o[0], -o[1]])(p0),\n      b = i.distance / 2,\n      y = -asin(sin(a[1] * radians) / sin(b)),\n      R = [-o[0], -o[1], -(a[0] > 0 ? pi - y : y) * degrees],\n      p = projection(raw(b)).rotate(R),\n      r = rotation(R),\n      center = p.center;\n  delete p.rotate;\n\n  p.center = function (_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p.clipAngle(90);\n}","import { geoGnomonicRaw as gnomonicRaw } from \"d3-geo\";\nimport { cos } from \"./math.js\";\nimport twoPoint from \"./twoPoint.js\";\nexport function twoPointAzimuthalRaw(d) {\n  var cosd = cos(d);\n\n  function forward(lambda, phi) {\n    var coordinates = gnomonicRaw(lambda, phi);\n    coordinates[0] *= cosd;\n    return coordinates;\n  }\n\n  forward.invert = function (x, y) {\n    return gnomonicRaw.invert(x / cosd, y);\n  };\n\n  return forward;\n}\nexport function twoPointAzimuthalUsa() {\n  return twoPointAzimuthal([-158, 21.5], [-77, 39]).clipAngle(60).scale(400);\n}\nexport default function twoPointAzimuthal(p0, p1) {\n  return twoPoint(twoPointAzimuthalRaw, p0, p1);\n}","import { geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw } from \"d3-geo\";\nimport { acos, atan2, cos, sin, sqrt, tan } from \"./math.js\";\nimport twoPoint from \"./twoPoint.js\"; // TODO clip to ellipse\n\nexport function twoPointEquidistantRaw(z0) {\n  if (!(z0 *= 2)) return azimuthalEquidistantRaw;\n  var lambdaa = -z0 / 2,\n      lambdab = -lambdaa,\n      z02 = z0 * z0,\n      tanLambda0 = tan(lambdab),\n      S = 0.5 / sin(lambdab);\n\n  function forward(lambda, phi) {\n    var za = acos(cos(phi) * cos(lambda - lambdaa)),\n        zb = acos(cos(phi) * cos(lambda - lambdab)),\n        ys = phi < 0 ? -1 : 1;\n    za *= za, zb *= zb;\n    return [(za - zb) / (2 * z0), ys * sqrt(4 * z02 * zb - (z02 - za + zb) * (z02 - za + zb)) / (2 * z0)];\n  }\n\n  forward.invert = function (x, y) {\n    var y2 = y * y,\n        cosza = cos(sqrt(y2 + (t = x + lambdaa) * t)),\n        coszb = cos(sqrt(y2 + (t = x + lambdab) * t)),\n        t,\n        d;\n    return [atan2(d = cosza - coszb, t = (cosza + coszb) * tanLambda0), (y < 0 ? -1 : 1) * acos(sqrt(t * t + d * d) * S)];\n  };\n\n  return forward;\n}\nexport function twoPointEquidistantUsa() {\n  return twoPointEquidistant([-158, 21.5], [-77, 39]).clipAngle(130).scale(122.571);\n}\nexport default function twoPointEquidistant(p0, p1) {\n  return twoPoint(twoPointEquidistantRaw, p0, p1);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, acos, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan } from \"./math.js\";\nexport function vanDerGrintenRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      G = cosTheta / (sinTheta + cosTheta - 1),\n      P = G * (2 / sinTheta - 1),\n      P2 = P * P,\n      P2_A2 = P2 + A2,\n      G_P2 = G - P2,\n      Q = A2 + G;\n  return [sign(lambda) * pi * (A * G_P2 + sqrt(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2, sign(phi) * pi * (P * Q - A * sqrt((A2 + 1) * P2_A2 - Q * Q)) / P2_A2];\n}\n\nvanDerGrintenRaw.invert = function (x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  if (abs(x) < epsilon) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x2 = (x /= pi) * x,\n      y2 = (y /= pi) * y,\n      x2_y2 = x2 + y2,\n      z = x2_y2 * x2_y2,\n      c1 = -abs(y) * (1 + x2_y2),\n      c2 = c1 - 2 * y2 + x2,\n      c3 = -2 * c1 + 1 + 2 * y2 + z,\n      d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27,\n      a1 = (c1 - c2 * c2 / (3 * c3)) / c3,\n      m1 = 2 * sqrt(-a1 / 3),\n      theta1 = acos(3 * d / (a1 * m1)) / 3;\n  return [pi * (x2_y2 - 1 + sqrt(1 + 2 * (x2 - y2) + z)) / (2 * x), sign(y) * pi * (-m1 * cos(theta1 + pi / 3) - c2 / (3 * c3))];\n};\n\nexport default function () {\n  return projection(vanDerGrintenRaw).scale(79.4183);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, atan, atan2, cos, halfPi, epsilon, pi, sign, sin, sqrt, tan } from \"./math.js\";\nexport function vanDerGrinten2Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      x1 = cosTheta * (sqrt(1 + A2) - A * cosTheta) / (1 + A2 * sinTheta * sinTheta);\n  return [sign(lambda) * pi * x1, sign(phi) * pi * sqrt(1 - x1 * (2 * A + x1))];\n}\n\nvanDerGrinten2Raw.invert = function (x, y) {\n  if (!x) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x1 = abs(x / pi),\n      A = (1 - x1 * x1 - (y /= pi) * y) / (2 * x1),\n      A2 = A * A,\n      B = sqrt(A2 + 1);\n  return [sign(x) * pi * (B - A), sign(y) * halfPi * sin(2 * atan2(sqrt((1 - 2 * A * x1) * (A + B) - x1), sqrt(B + A + x1)))];\n};\n\nexport default function () {\n  return projection(vanDerGrinten2Raw).scale(79.4183);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan } from \"./math.js\";\nexport function vanDerGrinten3Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = phi / halfPi,\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, pi * tan(theta / 2)];\n  var A = (pi / lambda - lambda / pi) / 2,\n      y1 = sinTheta / (1 + cos(theta));\n  return [pi * (sign(lambda) * sqrt(A * A + 1 - y1 * y1) - A), pi * y1];\n}\n\nvanDerGrinten3Raw.invert = function (x, y) {\n  if (!y) return [x, 0];\n  var y1 = y / pi,\n      A = (pi * pi * (1 - y1 * y1) - x * x) / (2 * pi * x);\n  return [x ? pi * (sign(x) * sqrt(A * A + 1) - A) : 0, halfPi * sin(2 * atan(y1))];\n};\n\nexport default function () {\n  return projection(vanDerGrinten3Raw).scale(79.4183);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, epsilon, halfPi, pi, sign, sqrt } from \"./math.js\";\nexport function vanDerGrinten4Raw(lambda, phi) {\n  if (!phi) return [lambda, 0];\n  var phi0 = abs(phi);\n  if (!lambda || phi0 === halfPi) return [0, phi];\n  var B = phi0 / halfPi,\n      B2 = B * B,\n      C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n      C2 = C * C,\n      BC = B * C,\n      B_C2 = B2 + C2 + 2 * BC,\n      B_3C = B + 3 * C,\n      lambda0 = lambda / halfPi,\n      lambda1 = lambda0 + 1 / lambda0,\n      D = sign(abs(lambda) - halfPi) * sqrt(lambda1 * lambda1 - 4),\n      D2 = D * D,\n      F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + 12 * BC * C2 + 4 * C2 * C2),\n      x1 = (D * (B_C2 + C2 - 1) + 2 * sqrt(F)) / (4 * B_C2 + D2);\n  return [sign(lambda) * halfPi * x1, sign(phi) * halfPi * sqrt(1 + D * abs(x1) - x1 * x1)];\n}\n\nvanDerGrinten4Raw.invert = function (x, y) {\n  var delta;\n  if (!x || !y) return [x, y];\n  y /= pi;\n  var x1 = sign(x) * x / halfPi,\n      D = (x1 * x1 - 1 + 4 * y * y) / abs(x1),\n      D2 = D * D,\n      B = 2 * y,\n      i = 50;\n\n  do {\n    var B2 = B * B,\n        C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n        C_ = (3 * B - B2 * B - 10) / (2 * B2 * B),\n        C2 = C * C,\n        BC = B * C,\n        B_C = B + C,\n        B_C2 = B_C * B_C,\n        B_3C = B + 3 * C,\n        F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + C2 * (12 * BC + 4 * C2)),\n        F_ = -2 * B_C * (4 * BC * C2 + (1 - 4 * B2 + 3 * B2 * B2) * (1 + C_) + C2 * (-6 + 14 * B2 - D2 + (-8 + 8 * B2 - 2 * D2) * C_) + BC * (-8 + 12 * B2 + (-10 + 10 * B2 - D2) * C_)),\n        sqrtF = sqrt(F),\n        f = D * (B_C2 + C2 - 1) + 2 * sqrtF - x1 * (4 * B_C2 + D2),\n        f_ = D * (2 * C * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D * (-1 + C2 + B_C2) + 2 * sqrtF) * (1 + C_) / (D2 + 4 * B_C2);\n    B -= delta = f / f_;\n  } while (delta > epsilon && --i > 0);\n\n  return [sign(x) * (sqrt(D * D + 4) + D) * pi / 4, halfPi * B];\n};\n\nexport default function () {\n  return projection(vanDerGrinten4Raw).scale(127.16);\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { acos, asin, atan2, cos, degrees, epsilon, halfPi, max, min, pi, radians, sin, sqrt, tan } from \"./math.js\";\n\nfunction wagnerFormula(cx, cy, m1, m2, n) {\n  function forward(lambda, phi) {\n    var s = m1 * sin(m2 * phi),\n        c0 = sqrt(1 - s * s),\n        c1 = sqrt(2 / (1 + c0 * cos(lambda *= n)));\n    return [cx * c0 * c1 * sin(lambda), cy * s * c1];\n  }\n\n  forward.invert = function (x, y) {\n    var t1 = x / cx,\n        t2 = y / cy,\n        p = sqrt(t1 * t1 + t2 * t2),\n        c = 2 * asin(p / 2);\n    return [atan2(x * tan(c), cx * p) / n, p && asin(y * sin(c) / (cy * m1 * p)) / m2];\n  };\n\n  return forward;\n}\n\nexport function wagnerRaw(poleline, parallels, inflation, ratio) {\n  // 60 is always used as reference parallel\n  var phi1 = pi / 3; // sanitizing the input values\n  // poleline and parallels may approximate but never equal 0\n\n  poleline = max(poleline, epsilon);\n  parallels = max(parallels, epsilon); // poleline must be <= 90; parallels may approximate but never equal 180\n\n  poleline = min(poleline, halfPi);\n  parallels = min(parallels, pi - epsilon); // 0 <= inflation <= 99.999\n\n  inflation = max(inflation, 0);\n  inflation = min(inflation, 100 - epsilon); // ratio > 0.\n  // sensible values, i.e. something that renders a map which still can be\n  // recognized as world map, are e.g. 20 <= ratio <= 1000.\n\n  ratio = max(ratio, epsilon); // convert values from boehm notation\n  // areal inflation e.g. from 0 to 1 or 20 to 1.2:\n\n  var vinflation = inflation / 100 + 1; // axial ratio e.g. from 200 to 2:\n\n  var vratio = ratio / 100; // the other ones are a bit more complicated...\n\n  var m2 = acos(vinflation * cos(phi1)) / phi1,\n      m1 = sin(poleline) / sin(m2 * halfPi),\n      n = parallels / pi,\n      k = sqrt(vratio * sin(poleline / 2) / sin(parallels / 2)),\n      cx = k / sqrt(n * m1 * m2),\n      cy = 1 / (k * sqrt(n * m1 * m2));\n  return wagnerFormula(cx, cy, m1, m2, n);\n}\nexport default function wagner() {\n  // default values generate wagner8\n  var poleline = 65 * radians,\n      parallels = 60 * radians,\n      inflation = 20,\n      ratio = 200,\n      mutate = projectionMutator(wagnerRaw),\n      projection = mutate(poleline, parallels, inflation, ratio);\n\n  projection.poleline = function (_) {\n    return arguments.length ? mutate(poleline = +_ * radians, parallels, inflation, ratio) : poleline * degrees;\n  };\n\n  projection.parallels = function (_) {\n    return arguments.length ? mutate(poleline, parallels = +_ * radians, inflation, ratio) : parallels * degrees;\n  };\n\n  projection.inflation = function (_) {\n    return arguments.length ? mutate(poleline, parallels, inflation = +_, ratio) : inflation;\n  };\n\n  projection.ratio = function (_) {\n    return arguments.length ? mutate(poleline, parallels, inflation, ratio = +_) : ratio;\n  };\n\n  return projection.scale(163.775);\n}\nexport function wagner7() {\n  return wagner().poleline(65).parallels(60).inflation(0).ratio(200).scale(172.633);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { sqrt, pi } from \"./math.js\";\nimport { mollweideBromleyRaw } from \"./mollweide.js\";\nvar A = 4 * pi + 3 * sqrt(3),\n    B = 2 * sqrt(2 * pi * sqrt(3) / A);\nexport var wagner4Raw = mollweideBromleyRaw(B * sqrt(3) / pi, B, A / 6);\nexport default function () {\n  return projection(wagner4Raw).scale(176.84);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { pi, sqrt } from \"./math.js\";\nexport function wagner6Raw(lambda, phi) {\n  return [lambda * sqrt(1 - 3 * phi * phi / (pi * pi)), phi];\n}\n\nwagner6Raw.invert = function (x, y) {\n  return [x / sqrt(1 - 3 * y * y / (pi * pi)), y];\n};\n\nexport default function () {\n  return projection(wagner6Raw).scale(152.63);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { asin, atan2, cos, sin, sqrt } from \"./math.js\";\nexport function wiechelRaw(lambda, phi) {\n  var cosPhi = cos(phi),\n      sinPhi = cos(lambda) * cosPhi,\n      sin1_Phi = 1 - sinPhi,\n      cosLambda = cos(lambda = atan2(sin(lambda) * cosPhi, -sin(phi))),\n      sinLambda = sin(lambda);\n  cosPhi = sqrt(1 - sinPhi * sinPhi);\n  return [sinLambda * cosPhi - cosLambda * sin1_Phi, -cosLambda * cosPhi - sinLambda * sin1_Phi];\n}\n\nwiechelRaw.invert = function (x, y) {\n  var w = (x * x + y * y) / -2,\n      k = sqrt(-w * (2 + w)),\n      b = y * w + x * k,\n      a = x * w - y * k,\n      D = sqrt(a * a + b * b);\n  return [atan2(k * b, D * (1 + w)), D ? -asin(k * a / D) : 0];\n};\n\nexport default function () {\n  return projection(wiechelRaw).rotate([0, -90, 45]).scale(124.75).clipAngle(180 - 1e-3);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { aitoffRaw } from \"./aitoff.js\";\nimport { halfPi, epsilon, sin, cos, sqrt, abs, acos } from \"./math.js\";\nexport function winkel3Raw(lambda, phi) {\n  var coordinates = aitoffRaw(lambda, phi);\n  return [(coordinates[0] + lambda / halfPi) / 2, (coordinates[1] + phi) / 2];\n}\n\nwinkel3Raw.invert = function (x, y) {\n  var lambda = x,\n      phi = y,\n      i = 25;\n\n  do {\n    var cosphi = cos(phi),\n        sinphi = sin(phi),\n        sin_2phi = sin(2 * phi),\n        sin2phi = sinphi * sinphi,\n        cos2phi = cosphi * cosphi,\n        sinlambda = sin(lambda),\n        coslambda_2 = cos(lambda / 2),\n        sinlambda_2 = sin(lambda / 2),\n        sin2lambda_2 = sinlambda_2 * sinlambda_2,\n        C = 1 - cos2phi * coslambda_2 * coslambda_2,\n        E = C ? acos(cosphi * coslambda_2) * sqrt(F = 1 / C) : F = 0,\n        F,\n        fx = 0.5 * (2 * E * cosphi * sinlambda_2 + lambda / halfPi) - x,\n        fy = 0.5 * (E * sinphi + phi) - y,\n        dxdlambda = 0.5 * F * (cos2phi * sin2lambda_2 + E * cosphi * coslambda_2 * sin2phi) + 0.5 / halfPi,\n        dxdphi = F * (sinlambda * sin_2phi / 4 - E * sinphi * sinlambda_2),\n        dydlambda = 0.125 * F * (sin_2phi * sinlambda_2 - E * sinphi * cos2phi * sinlambda),\n        dydphi = 0.5 * F * (sin2phi * coslambda_2 + E * sin2lambda_2 * cosphi) + 0.5,\n        denominator = dxdphi * dydlambda - dydphi * dxdlambda,\n        dlambda = (fy * dxdphi - fx * dydphi) / denominator,\n        dphi = (fx * dydlambda - fy * dxdlambda) / denominator;\n    lambda -= dlambda, phi -= dphi;\n  } while ((abs(dlambda) > epsilon || abs(dphi) > epsilon) && --i > 0);\n\n  return [lambda, phi];\n};\n\nexport default function () {\n  return projection(winkel3Raw).scale(158.837);\n}","export default function (x) {\n  return x;\n}","import reverse from \"./reverse\";\nimport transform from \"./transform\";\nexport default function (topology, o) {\n  return o.type === \"GeometryCollection\" ? {\n    type: \"FeatureCollection\",\n    features: o.geometries.map(function (o) {\n      return feature(topology, o);\n    })\n  } : feature(topology, o);\n}\nexport function feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {\n    type: \"Feature\",\n    properties: properties,\n    geometry: geometry\n  } : bbox == null ? {\n    type: \"Feature\",\n    id: id,\n    properties: properties,\n    geometry: geometry\n  } : {\n    type: \"Feature\",\n    id: id,\n    bbox: bbox,\n    properties: properties,\n    geometry: geometry\n  };\n}\nexport function object(topology, o) {\n  var transformPoint = transform(topology.transform),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k], k));\n    }\n\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p);\n  }\n\n  function line(arcs) {\n    var points = [];\n\n    for (var i = 0, n = arcs.length; i < n; ++i) {\n      arc(arcs[i], points);\n    }\n\n    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n\n    while (points.length < 4) {\n      points.push(points[0]);\n    } // This may happen if an arc has only two points.\n\n\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type,\n        coordinates;\n\n    switch (type) {\n      case \"GeometryCollection\":\n        return {\n          type: type,\n          geometries: o.geometries.map(geometry)\n        };\n\n      case \"Point\":\n        coordinates = point(o.coordinates);\n        break;\n\n      case \"MultiPoint\":\n        coordinates = o.coordinates.map(point);\n        break;\n\n      case \"LineString\":\n        coordinates = line(o.arcs);\n        break;\n\n      case \"MultiLineString\":\n        coordinates = o.arcs.map(line);\n        break;\n\n      case \"Polygon\":\n        coordinates = polygon(o.arcs);\n        break;\n\n      case \"MultiPolygon\":\n        coordinates = o.arcs.map(polygon);\n        break;\n\n      default:\n        return null;\n    }\n\n    return {\n      type: type,\n      coordinates: coordinates\n    };\n  }\n\n  return geometry(o);\n}","import identity from \"./identity\";\nexport default function (transform) {\n  if (transform == null) return identity;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function (input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2,\n        n = input.length,\n        output = new Array(n);\n    output[0] = (x0 += input[0]) * kx + dx;\n    output[1] = (y0 += input[1]) * ky + dy;\n\n    while (j < n) {\n      output[j] = input[j], ++j;\n    }\n\n    return output;\n  };\n}","export default function (array, n) {\n  var t,\n      j = array.length,\n      i = j - n;\n\n  while (i < --j) {\n    t = array[i], array[i++] = array[j], array[j] = t;\n  }\n}","// TODO if quantized, use simpler Int32 hashing?\nvar buffer = new ArrayBuffer(16),\n    floats = new Float64Array(buffer),\n    uints = new Uint32Array(buffer);\nexport default function (point) {\n  floats[0] = point[0];\n  floats[1] = point[1];\n  var hash = uints[0] ^ uints[1];\n  hash = hash << 5 ^ hash >> 7 ^ uints[2] ^ uints[3];\n  return hash & 0x7fffffff;\n}","var pi = Math.PI,\n    tau = 2 * pi,\n    quarterPi = pi / 4,\n    radians = pi / 180,\n    abs = Math.abs,\n    atan2 = Math.atan2,\n    cos = Math.cos,\n    sin = Math.sin;\n\nfunction halfArea(ring, closed) {\n  var i = 0,\n      n = ring.length,\n      sum = 0,\n      point = ring[closed ? i++ : n - 1],\n      lambda0,\n      lambda1 = point[0] * radians,\n      phi1 = point[1] * radians / 2 + quarterPi,\n      cosPhi0,\n      cosPhi1 = cos(phi1),\n      sinPhi0,\n      sinPhi1 = sin(phi1);\n\n  for (; i < n; ++i) {\n    point = ring[i];\n    lambda0 = lambda1, lambda1 = point[0] * radians;\n    phi1 = point[1] * radians / 2 + quarterPi;\n    cosPhi0 = cosPhi1, cosPhi1 = cos(phi1);\n    sinPhi0 = sinPhi1, sinPhi1 = sin(phi1); // Spherical excess E for a spherical triangle with vertices: south pole,\n    // previous point, current point.  Uses a formula derived from Cagnoli’s\n    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n    // See https://github.com/d3/d3-geo/blob/master/README.md#geoArea\n\n    var dLambda = lambda1 - lambda0,\n        sdLambda = dLambda >= 0 ? 1 : -1,\n        adLambda = sdLambda * dLambda,\n        k = sinPhi0 * sinPhi1,\n        u = cosPhi0 * cosPhi1 + k * cos(adLambda),\n        v = k * sdLambda * sin(adLambda);\n    sum += atan2(v, u);\n  }\n\n  return sum;\n}\n\nexport function sphericalRingArea(ring, interior) {\n  var sum = halfArea(ring, true);\n  if (interior) sum *= -1;\n  return (sum < 0 ? tau + sum : sum) * 2;\n}\nexport function sphericalTriangleArea(t) {\n  return abs(halfArea(t, false)) * 2;\n}","import * as d3js from \"d3\"\nimport * as d3geo from \"d3-geo\"\nimport * as geoprojection from \"d3-geo-projection\"\nimport * as topojson from \"topojson\"\nimport land50m from \"../../pages/geo/land-50m.json\"\nimport land110m from \"../../pages/geo/land-110m.json\"\n\nexport const d3 = Object.assign({}, d3js, d3geo, geoprojection)\n\nexport const outline = { type: \"Sphere\" }\n\nfunction geoRotatePhi(deltaPhi) {\n  const cosDeltaPhi = Math.cos(deltaPhi)\n  const sinDeltaPhi = Math.sin(deltaPhi)\n  return sink => ({\n    point(lambda, phi) {\n      const cosPhi = Math.cos(phi)\n      const x = Math.cos(lambda) * cosPhi\n      const y = Math.sin(lambda) * cosPhi\n      const z = Math.sin(phi)\n      const k = z * cosDeltaPhi + x * sinDeltaPhi\n      sink.point(Math.atan2(y, x * cosDeltaPhi - z * sinDeltaPhi), Math.asin(k))\n      console.log(lambda)\n    },\n    lineStart() {\n      sink.lineStart()\n    },\n    lineEnd() {\n      sink.lineEnd()\n    },\n    polygonStart() {\n      sink.polygonStart()\n    },\n    polygonEnd() {\n      sink.polygonEnd()\n    },\n    sphere() {\n      sink.sphere()\n    },\n  })\n}\n\nfunction geoPipeline(...transforms) {\n  return sink => {\n    for (let i = transforms.length - 1; i >= 0; --i) {\n      sink = transforms[i](sink)\n    }\n    return sink\n  }\n}\n\nconst geoClipCircle = d3.geoClipCircle\n\nconst preclip = camera => {\n  const distance = camera.distance\n  const tilt = (camera.tilt * Math.PI) / 180\n  const alpha = Math.acos(distance * Math.cos(tilt) * 0.999)\n  const clipDistance = geoClipCircle(Math.acos(1 / distance) - 1e-6)\n  return alpha\n    ? geoPipeline(\n        clipDistance,\n        geoRotatePhi(Math.PI + tilt),\n        geoClipCircle(Math.PI - alpha),\n        geoRotatePhi(-Math.PI - tilt)\n      )\n    : clipDistance\n}\n\nexport const projection = (width, height, rotate, camera) =>\n  d3\n    .geoSatellite()\n    .scale(camera.scale)\n    .tilt(camera.tilt)\n    .distance(camera.distance)\n    .preclip(preclip(camera))\n    .precision(0.1)\n    .translate([width / 2, height / 2])\n    .rotate(rotate)\n\nexport const graticule = d3.geoGraticule10()\n\nexport const land50 = topojson.feature(land50m, land50m.objects.land)\n\nexport const land110 = topojson.feature(land110m, land110m.objects.land)\n","import React, { useRef, useEffect, useCallback } from \"react\"\nimport PureCanvas from \"./pure-canvas\"\nimport { d3 } from \"../../lib/geo/utils\"\nimport { projection, outline, graticule } from \"../../lib/geo/utils\"\n\nfunction Canvas({ width, height, rotate, camera, land }) {\n  const canvasRef = useRef()\n  const _map = useCallback(\n    (projection, context) => {\n      const path = d3.geoPath(projection, context)\n\n      context.save()\n      context.beginPath()\n      path(outline)\n      context.clip()\n      context.fillStyle = \"#fff\"\n      context.fillRect(0, 0, width, height)\n      context.beginPath()\n      path(graticule)\n      context.strokeStyle = \"#ccc\"\n      context.stroke()\n      context.beginPath()\n      path(land)\n      context.fillStyle = \"#000\"\n      context.fill()\n      context.restore()\n      context.beginPath()\n      path(outline)\n      context.strokeStyle = \"#000\"\n      context.stroke()\n    },\n    [width, height, land]\n  )\n  const _updateCanvas = useCallback(\n    () =>\n      _map(\n        projection(width, height, rotate, camera),\n        canvasRef.current.getContext(\"2d\")\n      ),\n    [width, height, rotate, camera, _map]\n  )\n\n  useEffect(() => {\n    _updateCanvas()\n  }, [_updateCanvas])\n\n  function _saveContext(canvas) {\n    canvasRef.current = canvas\n  }\n\n  return <PureCanvas contextRef={_saveContext} width={width} height={height} />\n}\n\nexport default Canvas\n","import React, { memo } from \"react\"\n\nfunction PureCanvas({ width, height, contextRef }) {\n  return (\n    <canvas\n      width={width}\n      height={height}\n      ref={node => {\n        return contextRef(node)\n      }}\n    />\n  )\n}\n\nfunction areEqual() {\n  return false\n}\n\nexport default memo(PureCanvas, areEqual)\n"],"sourceRoot":""}